import{_ as h,C as o,c as d,o as k,j as i,G as e,aa as t,a,w as n}from"./chunks/framework.DW2s0-35.js";const m=JSON.parse('{"title":"Note 11","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/notes/No.11.md","filePath":"javascript/notes/No.11.md","lastUpdated":1727337514000}'),r={name:"javascript/notes/No.11.md"};function c(E,s,g,y,u,F){const p=o("BackTop"),l=o("Tag");return k(),d("div",null,[s[45]||(s[45]=i("h1",{id:"note-11",tabindex:"-1"},[a("Note 11 "),i("a",{class:"header-anchor",href:"#note-11","aria-label":'Permalink to "Note 11"'},"​")],-1)),e(p),s[46]||(s[46]=t("",23)),i("ul",null,[s[10]||(s[10]=t("",2)),i("li",null,[s[9]||(s[9]=i("p",null,"参数：",-1)),i("ul",null,[s[8]||(s[8]=i("li",null,[i("code",null,"url"),a(" 要连接的 "),i("code",null,"URL"),a("；这应该是 "),i("code",null,"WebSocket"),a(" 服务器将响应的 "),i("code",null,"URL"),a("。")],-1)),i("li",null,[s[1]||(s[1]=i("code",null,"protocols",-1)),s[2]||(s[2]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[0]||(s[0]=[a("可选")])),_:1}),s[3]||(s[3]=a(" 一个")),s[4]||(s[4]=i("code",null,"协议字符串",-1)),s[5]||(s[5]=a("或者一个")),s[6]||(s[6]=i("code",null,"包含协议字符串的数组",-1)),s[7]||(s[7]=a("。这些字符串用于指定子协议，这样单个服务器可以实现多个 WebSocket 子协议（例如，你可能希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。如果不指定协议字符串，则假定为空字符串。"))])])])]),s[47]||(s[47]=i("h3",{id:"属性",tabindex:"-1"},[a("属性 "),i("a",{class:"header-anchor",href:"#属性","aria-label":'Permalink to "属性"'},"​")],-1)),i("ul",null,[s[27]||(s[27]=i("li",null,[i("code",null,"WebSocket.binaryType"),a(": 使用二进制的数据类型连接。")],-1)),i("li",null,[s[12]||(s[12]=i("code",null,"WebSocket.bufferedAmount",-1)),s[13]||(s[13]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[11]||(s[11]=[a("只读")])),_:1}),s[14]||(s[14]=a(": 未发送至服务器的字节数。"))]),i("li",null,[s[16]||(s[16]=i("code",null,"WebSocket.extensions",-1)),s[17]||(s[17]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[15]||(s[15]=[a("只读")])),_:1}),s[18]||(s[18]=a(": 服务器选择的扩展。"))]),s[28]||(s[28]=i("li",null,[i("code",null,"WebSocket.onclose"),a(": 用于指定连接关闭后的回调函数。")],-1)),s[29]||(s[29]=i("li",null,[i("code",null,"WebSocket.onerror"),a(": 用于指定连接失败后的回调函数。")],-1)),s[30]||(s[30]=i("li",null,[i("code",null,"WebSocket.onmessage"),a(": 用于指定当从服务器接受到信息时的回调函数。")],-1)),s[31]||(s[31]=i("li",null,[i("code",null,"WebSocket.onopen"),a(": 用于指定连接成功后的回调函数。")],-1)),i("li",null,[s[20]||(s[20]=i("code",null,"WebSocket.protocol",-1)),s[21]||(s[21]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[19]||(s[19]=[a("只读")])),_:1}),s[22]||(s[22]=a(": 服务器选择的下属协议。"))]),i("li",null,[s[24]||(s[24]=i("code",null,"WebSocket.readyState",-1)),s[25]||(s[25]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[23]||(s[23]=[a("只读")])),_:1}),s[26]||(s[26]=a(": 当前的链接状态。"))]),s[32]||(s[32]=i("li",null,[i("code",null,"WebSocket.url"),a(" 只读: WebSocket 的绝对路径。")],-1))]),s[48]||(s[48]=t("",37)),i("ul",null,[i("li",null,[i("p",null,[s[34]||(s[34]=i("code",null,"url",-1)),s[35]||(s[35]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[33]||(s[33]=[a("可选")])),_:1})]),s[36]||(s[36]=i("ul",null,[i("li",null,[a("一个字符串，表示"),i("strong",null,[a("要加载的资源的 "),i("code",null,"URL"),a(" 或路径")]),a("。如果指定"),i("strong",null,'空字符串（""）或省略此参数，则会在目标浏览上下文中打开一个空白页'),a("。")])],-1))]),i("li",null,[i("p",null,[s[38]||(s[38]=i("code",null,"target",-1)),s[39]||(s[39]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[37]||(s[37]=[a("可选")])),_:1})]),s[40]||(s[40]=t("",1))]),i("li",null,[i("p",null,[s[42]||(s[42]=i("code",null,"windowFeatures",-1)),s[43]||(s[43]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[41]||(s[41]=[a("可选")])),_:1})]),s[44]||(s[44]=t("",2))])]),s[49]||(s[49]=t("",55))])}const C=h(r,[["render",c]]);export{m as __pageData,C as default};
