import{_ as h,c as d,j as i,a,G as e,ae as t,w as n,B as o,o as k}from"./chunks/framework.Dbi9E2AI.js";const m=JSON.parse('{"title":"Note 11","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/notes/No.11.md","filePath":"javascript/notes/No.11.md","lastUpdated":1727337514000}'),r={name:"javascript/notes/No.11.md"};function c(E,s,g,y,u,F){const p=o("BackTop"),l=o("Tag");return k(),d("div",null,[s[45]||(s[45]=i("h1",{id:"note-11",tabindex:"-1"},[a("Note 11 "),i("a",{class:"header-anchor",href:"#note-11","aria-label":'Permalink to "Note 11"'},"​")],-1)),e(p),s[46]||(s[46]=t(`<h2 id="weakset-weakmap" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" target="_blank" rel="noreferrer">WeakSet()</a> &amp; <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" target="_blank" rel="noreferrer">WeakMap()</a> <a class="header-anchor" href="#weakset-weakmap" aria-label="Permalink to &quot;[WeakSet()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) &amp; [WeakMap()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)&quot;">​</a></h2><p><code>WeakSet</code> 结构与 <code>Set</code> 类似，也是不重复的值的集合，具备:</p><ul><li><code>WeakSet.prototype.add(value)</code> ：向 <code>WeakSet</code> 实例添加一个新成员。</li><li><code>WeakSet.prototype.delete(value)</code> ：清除 <code>WeakSet</code> 实例的指定成员。</li><li><code>WeakSet.prototype.has(value)</code> ：返回一个布尔值，表示某个值是否在 <code>WeakSet</code> 实例之中。</li></ul><p><code>WeakSet</code> 与 <code>Set</code> 有两个区别（也没有<code>size</code>和<code>forEach</code>属性）：</p><ul><li><code>WeakSet</code> 的<strong>成员只能是对象和 Symbol 值</strong>，而<strong>不能是其他类型的值</strong></li><li><code>WeakSet</code> 中的<strong>对象都是弱引用</strong>，即<strong>垃圾回收机制不考虑 WeakSet 对该对象的引用</strong>，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 <code>WeakSet</code> 之中。</li></ul><p>由于 <code>WeakSet</code> 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此，<strong>ES6规定 WeakSet 和 WeakMap 不可遍历</strong>。</p><h3 id="weakset-应用场景" tabindex="-1">WeakSet()应用场景 <a class="header-anchor" href="#weakset-应用场景" aria-label="Permalink to &quot;WeakSet()应用场景&quot;">​</a></h3><br><p>一个很典型的应用场景： <strong>储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要一个数组来保存着被禁止掉的 DOM 元素:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> disabledElements</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loginButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过加入对应集合，给这个节点打上“禁用”标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">disabledElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginButton)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询元素在不在 disabledElements 中,就可以知道它是不是被禁用了,但是假如 元素从 DOM 树中被删除了,它的引用却仍然保存在 Set 中，它的键依然引用着,因此垃圾回收程序也不能回收它，这就很容易造成内存泄漏。</span></span></code></pre></div><p>使用 <code>WeakSet</code> 对象就很好的解决了这个问题:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> disabledElements</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loginButton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过加入对应集合，给这个节点打上“禁用”标签 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">disabledElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginButton)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样只要 WeakSet 中任何元素从 DOM 树中被删除，垃圾回收程序就可以忽略其存在，而立即释放其内存。</span></span></code></pre></div><p><code>WeakMap</code> <strong>弱引用的只是键名，而不是键值</strong>。键值依然是正常引用。</p><p><code>WeakMap</code>与<code>Map</code>有两个区别（也没有<code>size</code>、<code>forEach</code>和<code>clear</code>属性）：</p><ul><li><p><code>WeakMap</code><strong>只接受对象和 Symbol 值作为键名</strong>（<code>null</code>除外，<code>null</code>是对象但不能作为键名），不接受其他类型的值作为键名</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span></code></pre></div></li><li><p><code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p></li></ul><p><strong>只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存</strong>。也就是说，一旦不再需要，<code>WeakMap</code> 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p><p><code>WeakMap</code>的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [e1, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo 元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [e2, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar 元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一旦不再需要两个对象 e1 和 e2，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放el占用的内存.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不需要 e1 和 e2 的时候，必须手动删除引用，一旦忘记删除，就会造成内存泄露</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用weakMap解决该问题</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下代码棕 DOM 节点对象除了 WeakMap 的弱引用外，其他位置对该对象的引用一旦消除，该对象占用的内存就会被垃圾回收机制释放。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WeakMap 保存的这个键值对，也会自动消失。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo元素&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样当el被移除时，就会自动释放占用的内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;foo元素&#39;</span></span></code></pre></div><p>总之，<strong>WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失</strong>。<code>WeakMap</code>结构有助于防止内存泄漏。 <br> 一个典型应用场景是，在网页的 <code>DOM</code> 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 <code>DOM</code> 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p><h2 id="websocket" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket</a> <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;[WebSocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)&quot;">​</a></h2><p><code>WebSocket</code> 对象提供了用于创建和管理 <code>WebSocket</code> 连接，以及可以通过该连接发送和接收数据的 API。</p><p><code>WebSockets</code> 是一种先进的技术。它<strong>可以在用户的浏览器和服务器之间打开交互式通信会话</strong>。使用此 API，你可以向服务器发送消息并接收事件驱动的响应，而无需通过轮询服务器的方式以获得响应。</p><p>使用 <code>WebSocket()</code> 构造函数来构造一个 <code>WebSocket</code>。</p>`,23)),i("ul",null,[s[10]||(s[10]=t('<li><p>构造函数: <code>WebSocket(url[, protocols])</code> 返回一个 <code>WebSocket</code> 对象。</p></li><li><p>语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aWebSocket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url [, protocols])</span></span></code></pre></div></li>',2)),i("li",null,[s[9]||(s[9]=i("p",null,"参数：",-1)),i("ul",null,[s[8]||(s[8]=i("li",null,[i("code",null,"url"),a(" 要连接的 "),i("code",null,"URL"),a("；这应该是 "),i("code",null,"WebSocket"),a(" 服务器将响应的 "),i("code",null,"URL"),a("。")],-1)),i("li",null,[s[1]||(s[1]=i("code",null,"protocols",-1)),s[2]||(s[2]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[0]||(s[0]=[a("可选")])),_:1}),s[3]||(s[3]=a(" 一个")),s[4]||(s[4]=i("code",null,"协议字符串",-1)),s[5]||(s[5]=a("或者一个")),s[6]||(s[6]=i("code",null,"包含协议字符串的数组",-1)),s[7]||(s[7]=a("。这些字符串用于指定子协议，这样单个服务器可以实现多个 WebSocket 子协议（例如，你可能希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。如果不指定协议字符串，则假定为空字符串。"))])])])]),s[47]||(s[47]=i("h3",{id:"属性",tabindex:"-1"},[a("属性 "),i("a",{class:"header-anchor",href:"#属性","aria-label":'Permalink to "属性"'},"​")],-1)),i("ul",null,[s[27]||(s[27]=i("li",null,[i("code",null,"WebSocket.binaryType"),a(": 使用二进制的数据类型连接。")],-1)),i("li",null,[s[12]||(s[12]=i("code",null,"WebSocket.bufferedAmount",-1)),s[13]||(s[13]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[11]||(s[11]=[a("只读")])),_:1}),s[14]||(s[14]=a(": 未发送至服务器的字节数。"))]),i("li",null,[s[16]||(s[16]=i("code",null,"WebSocket.extensions",-1)),s[17]||(s[17]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[15]||(s[15]=[a("只读")])),_:1}),s[18]||(s[18]=a(": 服务器选择的扩展。"))]),s[28]||(s[28]=i("li",null,[i("code",null,"WebSocket.onclose"),a(": 用于指定连接关闭后的回调函数。")],-1)),s[29]||(s[29]=i("li",null,[i("code",null,"WebSocket.onerror"),a(": 用于指定连接失败后的回调函数。")],-1)),s[30]||(s[30]=i("li",null,[i("code",null,"WebSocket.onmessage"),a(": 用于指定当从服务器接受到信息时的回调函数。")],-1)),s[31]||(s[31]=i("li",null,[i("code",null,"WebSocket.onopen"),a(": 用于指定连接成功后的回调函数。")],-1)),i("li",null,[s[20]||(s[20]=i("code",null,"WebSocket.protocol",-1)),s[21]||(s[21]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[19]||(s[19]=[a("只读")])),_:1}),s[22]||(s[22]=a(": 服务器选择的下属协议。"))]),i("li",null,[s[24]||(s[24]=i("code",null,"WebSocket.readyState",-1)),s[25]||(s[25]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[23]||(s[23]=[a("只读")])),_:1}),s[26]||(s[26]=a(": 当前的链接状态。"))]),s[32]||(s[32]=i("li",null,[i("code",null,"WebSocket.url"),a(" 只读: WebSocket 的绝对路径。")],-1))]),s[48]||(s[48]=t(`<h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><code>WebSocket.close([code[, reason]])</code>: 关闭当前链接。</li><li><code>WebSocket.send(data)</code>: 对要传输的数据进行排队。</li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>使用 <code>addEventListener()</code> 或将一个事件监听器赋值给本接口的 <code>oneventname</code> 属性，来监听下面的事件。</p><ul><li><code>close</code>：当一个 <code>WebSocket</code> 连接被关闭时触发。 也可以通过 <code>onclose</code> 属性来设置。</li><li><code>error</code>：当一个 <code>WebSocket</code> 连接因错误而关闭时触发，例如无法发送数据时。 也可以通过 <code>onerror</code> 属性来设置。</li><li><code>message</code>：当通过 <code>WebSocket</code> 收到数据时触发。 也可以通过 <code>onmessage</code> 属性来设置。</li><li><code>open</code>：当一个 <code>WebSocket</code> 连接成功时触发。 也可以通过 <code>onopen</code> 属性来设置。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create WebSocket connection.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ws://localhost:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Connection opened</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Server!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Listen for messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Message from server &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="es6模块与commonjs模块的差异" tabindex="-1"><a href="https://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82" target="_blank" rel="noreferrer">ES6模块与CommonJS模块的差异</a> <a class="header-anchor" href="#es6模块与commonjs模块的差异" aria-label="Permalink to &quot;[ES6模块与CommonJS模块的差异](https://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82)&quot;">​</a></h2><ul><li><code>CommonJS</code> 模块输出的是一个<strong>值的拷贝</strong>，<code>ES6</code> 模块输出的是<strong>值的引用</strong>。 <ul><li><code>CommonJS</code> 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li><code>ES6</code> 模块的运行机制与 <code>CommonJS</code> 不一样。<strong>JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用</strong>。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，<code>ES6</code> 的import有点像 Unix 系统的“符号连接”，<strong>原始值变了，import加载的值也会跟着变</strong>。因此，<code>ES6</code> 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul></li><li><code>CommonJS</code> 模块是<strong>运行时</strong>加载，<code>ES6</code> 模块是<strong>编译时</strong>输出接口。 <ul><li><code>CommonJS</code> 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 <code>ES6</code> 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li></ul></li><li><code>CommonJS</code> 模块的<code>require()</code>是<strong>同步加载</strong>模块，<code>ES6</code> 模块的<code>import</code>命令是<strong>异步加载</strong>，有一个独立的模块依赖的解析阶段。</li></ul><h3 id="node-js-的模块加载方法" tabindex="-1">Node.js 的模块加载方法 <a class="header-anchor" href="#node-js-的模块加载方法" aria-label="Permalink to &quot;Node.js 的模块加载方法&quot;">​</a></h3><br><p><code>JavaScript</code> 现在有两种模块。一种是 <code>ES6</code> 模块，简称 <strong>ESM</strong>；另一种是 <code>CommonJS</code> 模块，简称 <strong>CJS</strong>。</p><p><code>CommonJS</code> 模块是 <code>Node.js</code> 专用的，与 <code>ES6</code> 模块不兼容。语法上面，两者最明显的差异是，<code>CommonJS</code> 模块使用<code>require()</code>和<code>module.exports</code>，<code>ES6</code> 模块使用<code>import</code>和<code>export</code>。</p><br><p>它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。</p><br><p><code>Node.js</code> 要求 <code>ES6</code> 模块采用<code>.mjs</code>后缀文件名。也就是说，只要脚本文件里面使用<code>import</code>或者<code>export</code>命令，那么就必须采用<code>.mjs</code>后缀名。<code>Node.js</code> 遇到<code>.mjs</code>文件，就认为它是 <code>ES6</code> 模块，<strong>默认启用严格模式</strong>，不必在每个模块文件顶部指定<code>&quot;use strict&quot;</code>。</p><p><strong>如果不希望将后缀名改成.mjs，可以在项目的<code>package.json</code>文件中，指定<code>type</code>字段为<code>module</code>。</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 一旦设置了以后，该项目的 JS 脚本，就被解释成 ES6 模块。</span></span></code></pre></div><p>如果这时还要使用 <code>CommonJS</code> 模块，那么需要将 <code>CommonJS</code> 脚本的后缀名都改成<code>.cjs</code>。如果没有<code>type</code>字段，或者<code>type</code>字段为<code>commonjs</code>，则<code>.js</code>脚本会被解释成 <code>CommonJS</code> 模块。</p><br><p><strong>总结为一句话</strong>：<code>.mjs</code>文件总是以 <code>ES6</code> 模块加载，<code>.cjs</code>文件总是以 <code>CommonJS</code> 模块加载，<code>.js</code>文件的加载取决于<code>package.json</code>里面<code>type</code>字段的设置。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li>ES6 模块与 CommonJS 模块尽量不要混用。require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。</li><li>如果 package.json 不包含 &quot;type&quot;: &quot;module&quot;，Vite 会生成不同的文件后缀名以兼容 Node.js。.js 会变为 .mjs 而 .cjs 会变为 .js 。（即会生成 .mjs 和 .js 的两个文件）</li><li>如果 package.json 包含 &quot;type&quot;: &quot;module&quot;，（则会生成 .cjs 和 .js 的两个文件）</li></ul></div><h2 id="eval-函数" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noreferrer">eval()</a>函数 <a class="header-anchor" href="#eval-函数" aria-label="Permalink to &quot;[eval()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)函数&quot;">​</a></h2><p><code>eval()</code> 函数会将传入的字符串当做 <code>JavaScript</code> 代码进行执行。</p><ul><li><p>语法：eval(string)</p></li><li><p>参数：string 一个表示 <code>JavaScript</code> 表达式、语句或一系列语句的字符串。表达式可以包含变量与已存在对象的属性。</p></li><li><p>返回值： 返回字符串中代码的返回值。如果返回值为空，则返回 <code>undefined</code>。</p></li></ul><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 2 + 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: false</span></span></code></pre></div><h3 id="永远不要使用-eval" tabindex="-1">永远不要使用 eval！ <a class="header-anchor" href="#永远不要使用-eval" aria-label="Permalink to &quot;永远不要使用 eval！&quot;">​</a></h3><p><code>eval()</code> 是一个危险的函数，它<strong>使用与调用者相同的权限执行代码</strong>。如果你用 <code>eval()</code> 运行的字符串代码被恶意方（不怀好意的人）修改，你最终可能会在你的网页/扩展程序的权限下，在用户计算机上运行恶意代码。更重要的是，第三方代码可以看到某一个 <code>eval()</code> 被调用时的作用域，这也有可能导致一些不同方式的攻击。相似的 <code>Function</code> 就不容易被攻击。</p><blockquote><p>eval() 通常比其他替代方法更慢，因为它必须调用 JS 解释器，而许多其他结构则可被现代 JS 引擎进行优化。</p></blockquote><p>此外，现代 <code>JavaScript</code> 解释器将 <code>JavaScript</code> 转换为机器代码。这意味着任何变量命名的概念都会被删除。因此，任意一个 <code>eval</code> 的使用都会强制浏览器进行冗长的变量名称查找，以确定变量在机器代码中的位置并设置其值。另外，新内容将会通过 <code>eval()</code> 引进给变量，比如更改该变量的类型，因此会强制浏览器重新执行所有已经生成的机器代码以进行补偿。但是（谢天谢地）存在一个非常好的 <code>eval</code> 替代方法：只需使用 window.Function。 这有个例子方便你了解如何将eval()的使用转变为Function()。</p><h2 id="window-open-微信扫码弹窗" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open" target="_blank" rel="noreferrer">window.open()</a> 微信扫码弹窗 <a class="header-anchor" href="#window-open-微信扫码弹窗" aria-label="Permalink to &quot;[window.open()](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open) 微信扫码弹窗&quot;">​</a></h2><p><code>Window</code> 接口的 <code>open()</code> 方法，是用<strong>指定的名称将指定的资源加载到新的或已存在的浏览上下文（标签、窗口或 iframe）中</strong>。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, target)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, target, windowFeatures)</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3>`,37)),i("ul",null,[i("li",null,[i("p",null,[s[34]||(s[34]=i("code",null,"url",-1)),s[35]||(s[35]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[33]||(s[33]=[a("可选")])),_:1})]),s[36]||(s[36]=i("ul",null,[i("li",null,[a("一个字符串，表示"),i("strong",null,[a("要加载的资源的 "),i("code",null,"URL"),a(" 或路径")]),a("。如果指定"),i("strong",null,'空字符串（""）或省略此参数，则会在目标浏览上下文中打开一个空白页'),a("。")])],-1))]),i("li",null,[i("p",null,[s[38]||(s[38]=i("code",null,"target",-1)),s[39]||(s[39]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[37]||(s[37]=[a("可选")])),_:1})]),s[40]||(s[40]=t("<ul><li>一个不含空格的字符串，用于<strong>指定加载资源的浏览上下文的名称</strong>。如果该名称无法识别现有的上下文，则会创建一个新的上下文，并赋予指定的名称。还可以使用特殊的 <code>target</code> 关键字：<code>_self</code>、<code>_blank</code>、<code>_parent</code> 和 <code>_top</code>。 该名称可用作 <code>&lt;a&gt;</code> 或 <code>&lt;form&gt;</code> 元素的 <code>target</code> 属性。</li></ul>",1))]),i("li",null,[i("p",null,[s[42]||(s[42]=i("code",null,"windowFeatures",-1)),s[43]||(s[43]=a()),e(l,{bordered:!1,color:"cyan"},{default:n(()=>s[41]||(s[41]=[a("可选")])),_:1})]),s[44]||(s[44]=t('<ul><li>一个字符串，包含以逗号分隔的窗口特性列表，形式为 <code>name=value</code>，布尔特性则仅为 <code>name</code>。这些特性包括窗口的默认大小和位置、是否打开最小弹出窗口等选项。 <br>支持以下选项： <ul><li><p><code>popup</code>: 如果启用此特性，则要求使用最小弹出窗口。弹出窗口中包含的用户界面功能将由浏览器自动决定，<strong>一般只包括地址栏</strong>。</p><p>如果未启用 <code>popup</code>，也没有声明窗口特性，则新的浏览上下文将是一个标签页。</p><div class="tip custom-block"><p class="custom-block-title">备注：</p><p>在 <code>windowFeatures</code> 参数中指定除 <code>noopener</code> 或 <code>noreferrer</code> 以外的任何特性，也会产生请求弹出窗口的效果。</p></div><p>要启用该特性，可以不指定 <code>popup</code> 值，或将其设置为 <code>yes</code>, <code>1</code> 或 <code>true</code>。</p><p>例如：<code>popup=yes</code>、<code>popup=1</code>、<code>popup=true</code> 和 <code>popup</code> 的结果完全相同。</p></li><li><p><code>width</code> 或 <code>innerWidth</code>: 指定<strong>内容区域（包括滚动条）的宽度</strong>。最小要求值为 <code>100</code>。</p></li><li><p><code>height</code> 或 <code>innerHeight</code>: 指定<strong>内容区域（包括滚动条）的高度</strong>。最小要求值为 <code>100</code>。</p></li><li><p><code>left</code> 或 <code>screenX</code>: 指定<strong>从用户操作系统定义的工作区左侧到新窗口生成位置的距离</strong>（以像素为单位）。</p></li><li><p><code>top</code> 或 <code>screenY</code>: 指定<strong>从用户操作系统定义的工作区顶部到新窗口生成位置的距离</strong>（以像素为单位）。</p></li><li><p><code>noopener</code>: 如果设置了此特性，<strong>新窗口将无法通过 Window.opener 访问原窗口，并返回 null</strong>。</p><p>使用 <code>noopener</code> 时，在决定是否打开新的浏览上下文时，除 <code>_top</code>、<code>_self</code> 和 <code>_parent</code> 以外的非空目标名称会像 <code>_blank</code> 一样处理。</p></li><li><p><code>noreferrer</code>: 如果设置了此特性，浏览器将省略 <code>Referer</code> 标头，并将 <code>noopener</code> 设为 <code>true</code>。更多信息请参阅 rel=&quot;noreferrer&quot; (en-US)</p></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">备注</p><p><code>windowFeatures</code> 中要求的位置（<code>top</code>、<code>left</code>）和尺寸（<code>width</code>、<code>height</code>）值，如果其中任何一个值不允许在用户操作系统应用程序的工作区内呈现整个浏览器弹出窗口，则将被更正。换句话说，新弹出窗口的任何部分最初都不能置于屏幕之外。</p></div>',2))])]),s[49]||(s[49]=t(`<h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>一个 <code>WindowProxy</code> (en-US) 对象。只要符合同源策略安全要求，返回的引用就可用于访问新窗口的属性和方法。</p><h3 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>打开一个新标签页</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.mozilla.org/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mozillaTab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>可以控制新弹出窗口的大小和位置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> windowFeatures</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left=100,top=100,width=320,height=320&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;https://www.mozilla.org/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;mozillaWindow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  windowFeatures</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不允许打开此窗口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可能被内置弹窗阻止程序阻止了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // …</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="window-moveto" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/moveTo" target="_blank" rel="noreferrer">window.moveTo</a> <a class="header-anchor" href="#window-moveto" aria-label="Permalink to &quot;[window.moveTo](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/moveTo)&quot;">​</a></h2><p>将当前窗口移动到指定的坐标位置。</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span></code></pre></div><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>x</code>: 是要移动到的位置横坐标</li><li><code>y</code>: 是要移动到的位置纵坐标</li></ul><h3 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 把窗口移动到左上角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">附注</p><p>从 Firefox 7 开始，如果符合下列情况，则<strong>普通网页中的 JavaScript 无法通过调用该函数来移动浏览器窗口</strong>：</p><ol><li>当前<strong>窗口或标签页不是由window.open方法创建的</strong></li><li>当前<strong>标签页所在的窗口包含有多个标签页</strong></li></ol></div><h2 id="window-resizeto" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resizeTo" target="_blank" rel="noreferrer">window.resizeTo</a> <a class="header-anchor" href="#window-resizeto" aria-label="Permalink to &quot;[window.resizeTo](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resizeTo)&quot;">​</a></h2><p>动态调整窗口的大小。</p><h3 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aWidth, aHeight)</span></span></code></pre></div><h3 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>aWidth</code>: 是一个整数，表示新的 <code>outerWidth</code>（单位：像素）（包括滚动条、窗口边框等）。</li><li><code>aHeight</code>: 是一个整数，表示新的 <code>outerHeight</code>（单位：像素）（包括滚动条、标题栏、窗口边框等）。</li></ul><h3 id="示例-4" tabindex="-1">示例 <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将窗口设置为整个屏幕的 1/4 大小（面积）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quarter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.screen.availWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, window.screen.availHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p>从 Firefox 7 开始，<strong>不能改变浏览器窗口的大小了，要依据下面的规则</strong>：</p><ol><li>不能设置那些<strong>不是通过 window.open 创建的窗口或 Tab 的大小</strong>。</li><li><strong>当一个窗口里面含有一个以上的 Tab 时，无法设置窗口的大小</strong>。</li></ol></div><h2 id="window-scrollto" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo" target="_blank" rel="noreferrer">Window: scrollTo()</a> <a class="header-anchor" href="#window-scrollto" aria-label="Permalink to &quot;[Window: scrollTo()](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo)&quot;">​</a></h2><p><code>Window.scrollTo()</code> 会滚动到文档中的一组特定坐标。</p><h3 id="语法-3" tabindex="-1">语法 <a class="header-anchor" href="#语法-3" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span></code></pre></div><h3 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>x-coord</code> 是你希望显示在左上角的文档水平轴像素。</li><li><code>y-coord</code> 是你希望显示在左上角的文档垂直轴像素。</li><li><code>options</code> 是一个包含三个属性的对象： <ol><li><code>top</code> 指定沿 <code>Y</code> 轴滚动窗口或元素的像素数量。</li><li><code>left</code> 指定沿 <code>X</code> 轴滚动窗口或元素的像素数量。</li><li><code>behavior</code> 确定滚动是即时完成还是以平滑动画进行。该选项是一个字符串，必须取以下值之一：</li></ol><ul><li><code>smooth</code>：滚动应该平滑地进行动画展示</li><li><code>instant</code>：滚动应在一次跳转中即时完成</li><li><code>auto</code>：滚动行为由 <code>scroll-behavior</code> 的计算值来决定</li></ul></li></ul><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置滚动行为改为平滑的滚动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="element-scrollto" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTo" target="_blank" rel="noreferrer">Element.scrollTo()</a> <a class="header-anchor" href="#element-scrollto" aria-label="Permalink to &quot;[Element.scrollTo()](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTo)&quot;">​</a></h2><p><code>Element</code> 的 <code>scrollTo()</code> 方法可以使界面滚动到给定元素的指定坐标位置。</p><h3 id="语法-4" tabindex="-1">语法 <a class="header-anchor" href="#语法-4" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span></code></pre></div><h3 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>x-coord</code>: 是你想要显示在左上角的元素沿水平轴的像素。</li><li><code>y-coord</code>: 是你想要显示在左上角的元素沿垂直轴的像素。</li><li><code>options</code>: 是一个包含三个属性的对象： <ol><li><code>top</code>: 指定沿 <code>Y</code> 轴滚动窗口或元素的像素数。</li><li><code>left</code>: 指定沿 <code>X</code> 轴滚动窗口或元素的像素数。</li><li><code>behavior</code>: <code>smooth</code> 表示平滑滚动并产生过渡效果、<code>instant</code> 表示滚动会直接跳转到目标位置，没有过渡效果。<code>auto</code> 或缺省值表示浏览器会自动选择滚动时的过渡效果。</li></ol></li></ul><h3 id="示例-5" tabindex="-1">示例 <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用 <code>options</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="element-scrollby" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollBy" target="_blank" rel="noreferrer">Element.scrollBy()</a> <a class="header-anchor" href="#element-scrollby" aria-label="Permalink to &quot;[Element.scrollBy()](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollBy)&quot;">​</a></h2><p><code>scrollBy()</code> 方法是使得元素滚动一段特定距离的 <code>Element</code> 接口。</p><h3 id="语法-5" tabindex="-1">语法 <a class="header-anchor" href="#语法-5" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">coord)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span></code></pre></div><h3 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><code>x-coord</code> 是元素要在横轴上滚动的距离。</li><li><code>y-coord</code> 是元素要在纵轴上滚动的距离。</li></ul><p><em>or</em></p><ul><li><code>options</code> 是一个 <code>ScrollToOptions</code> 字典。</li></ul><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 让元素滚动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用 <code>options</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,55))])}const C=h(r,[["render",c]]);export{m as __pageData,C as default};
