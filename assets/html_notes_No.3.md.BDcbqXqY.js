import{_ as e,C as a,c as o,o as l,j as i,G as d,aa as n,a as h}from"./chunks/framework.TPH-vz2q.js";const y=JSON.parse('{"title":"Note 3","description":"","frontmatter":{},"headers":[],"relativePath":"html/notes/No.3.md","filePath":"html/notes/No.3.md","lastUpdated":1727337514000}'),c={name:"html/notes/No.3.md"};function r(p,s,k,g,E,u){const t=a("BackTop");return l(),o("div",null,[s[0]||(s[0]=i("h1",{id:"note-3",tabindex:"-1"},[h("Note 3 "),i("a",{class:"header-anchor",href:"#note-3","aria-label":'Permalink to "Note 3"'},"​")],-1)),d(t),s[1]||(s[1]=n('<h2 id="html-语义化" tabindex="-1">HTML 语义化 <a class="header-anchor" href="#html-语义化" aria-label="Permalink to &quot;HTML 语义化&quot;">​</a></h2><p>HTML语义化是一种编写HTML文档的方法，它<strong>强调使用恰当的HTML标签来表达页面内容的结构和意义</strong>。这种方法的<strong>核心在于提高网页的可访问性、搜索引擎优化（SEO）和代码的可维护性</strong>。通过使用语义化的标签，开发者能够使网页的结构更加清晰，使得不仅是人类用户，还有搜索引擎和辅助技术（如屏幕阅读器）都能够更好地理解网页内容。</p><p>以下是HTML语义化的一些关键点：</p><ol><li><p><strong>使用恰当的HTML5标签</strong>：HTML5引入了一系列新的语义标签，如<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;footer&gt;</code>等，这些标签都是为了更好地描述网页的不同部分而设计的。</p></li><li><p><strong>内容结构化</strong>：通过使用这些语义标签，开发者可以将页面内容组织成清晰的结构，例如，使用<code>&lt;article&gt;</code>标签来包裹独立的内容块，如博客文章或新闻故事，而<code>&lt;footer&gt;</code>标签则用于包含作者信息、版权声明等页脚内容。</p></li><li><p><strong>提高可访问性</strong>：对于视觉受限用户，屏幕阅读器等辅助技术可以通过语义化的标签更好地理解页面内容，并以有意义的方式呈现给用户。例如，<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>的标题标签可以帮助屏幕阅读器理解页面的层次结构。</p></li><li><p><strong>搜索引擎优化</strong>：搜索引擎（如Google）在索引网页时，会考虑HTML标签的语义信息。使用正确的语义标签可以帮助搜索引擎更好地理解页面内容，从而可能提高网页的搜索排名。</p></li><li><p><strong>代码维护</strong>：语义化的HTML代码更加清晰易读，这使得其他开发者（或未来的你）更容易理解和维护代码。例如，如果你看到<code>&lt;section&gt;</code>标签，你会知道它代表了一个独立的区段，而不需要查看样式表或JavaScript代码。</p></li><li><p><strong>样式和行为的分离</strong>：语义化HTML鼓励将内容（HTML）与样式（CSS）和行为（JavaScript）分离。这样做不仅有助于提高代码的可维护性，还可以使得网页在没有CSS或JavaScript的情况下仍然保持一定的可读性。</p></li><li><p><strong>避免过度使用<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code></strong>：虽然<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签在布局和样式应用上非常灵活，但它们本身并不传达任何语义信息。在可能的情况下，应优先使用更具体的语义标签。</p></li></ol><p>总之，<strong>HTML语义化是一种编写网页的方法，它通过使用描述性的标签来提高内容的可理解性，从而使得网页更加友好地与用户、搜索引擎和开发工具互动。</strong></p><h2 id="src-和-href-的区别和使用场景" tabindex="-1">src 和 href 的区别和使用场景 <a class="header-anchor" href="#src-和-href-的区别和使用场景" aria-label="Permalink to &quot;src 和 href 的区别和使用场景&quot;">​</a></h2><p><code>src</code>（source的缩写）和<code>href</code>（hypertext reference的缩写）是HTML中用于不同目的的两个属性。它们的主要区别和使用场景如下：</p><h3 id="src-源" tabindex="-1"><code>src</code>（源） <a class="header-anchor" href="#src-源" aria-label="Permalink to &quot;`src`（源）&quot;">​</a></h3><h3 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h3><br><p><code>src</code>属性用于<strong>指定嵌入到当前文档中的外部资源的路径</strong>。这些资源可以是图像、视频、音频、脚本文件等。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><p><strong>图像</strong>：<code>&lt;img&gt;</code>标签使用<code>src</code>属性来指定图像文件的路径。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/image.jpg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;描述文本&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>视频</strong>：<code>&lt;video&gt;</code>标签使用<code>src</code>属性来指定视频文件的路径。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/video.mp4&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>音频</strong>：<code>&lt;audio&gt;</code>标签使用<code>src</code>属性来指定音频文件的路径。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">audio</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/audio.mp3&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">audio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>脚本</strong>：<code>&lt;script&gt;</code>标签使用<code>src</code>属性来引入外部JavaScript文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>框架</strong>：<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>等标签也使用<code>src</code>属性来指定嵌入内容的路径。</p></li></ul><h3 id="href-超文本引用" tabindex="-1"><code>href</code>（超文本引用） <a class="header-anchor" href="#href-超文本引用" aria-label="Permalink to &quot;`href`（超文本引用）&quot;">​</a></h3><h3 id="用途-1" tabindex="-1">用途 <a class="header-anchor" href="#用途-1" aria-label="Permalink to &quot;用途&quot;">​</a></h3><br><p><code>href</code>属性<strong>用于指定超链接的目标URL</strong>，即<strong>链接指向的另一个文档或资源的位置</strong>。</p><h3 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><p><strong>链接</strong>：<code>&lt;a&gt;</code>标签使用<code>href</code>属性来定义超链接，点击链接会导航到指定的URL。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.example.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;访问示例网站&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>样式表</strong>：<code>&lt;link&gt;</code>标签使用<code>href</code>属性来链接外部CSS样式表。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/styles.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>图标</strong>：<code>&lt;link&gt;</code>标签使用<code>href</code>属性来定义页面的图标（favicon）。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/favicon.ico&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>资源预加载</strong>：<code>&lt;link&gt;</code>标签的<code>rel</code>属性可以设置为<code>preconnect</code>、<code>preload</code>等，使用<code>href</code>属性来指定预加载的资源。</p></li></ul><h3 id="总结区别" tabindex="-1">总结区别 <a class="header-anchor" href="#总结区别" aria-label="Permalink to &quot;总结区别&quot;">​</a></h3><ul><li><strong>加载方式</strong>：<code>src</code>属性加载的资源会被嵌入到当前文档中，而<code>href</code>属性创建的链接会在新的上下文或窗口中加载资源。</li><li><strong>导航行为</strong>：使用<code>href</code>属性的链接会导致页面跳转，而<code>src</code>属性通常用于在当前页面内嵌入内容。</li><li><strong>应用范围</strong>：<code>src</code>属性通常与<code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>等标签一起使用，而<code>href</code>属性通常与<code>&lt;a&gt;</code>、<code>&lt;link&gt;</code>等标签一起使用。</li></ul><p>理解<code>src</code>和<code>href</code>的区别对于正确地使用HTML标签和创建功能性网页非常重要。</p><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p><code>BFC（Block Formatting Context）</code>是<strong>块级格式化上下文</strong>，是Web页面的可视CSS渲染的一部分。它<strong>决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用</strong>。在 <code>BFC</code> 中，元素的布局不会影响到 <code>BFC</code> 外部的元素。</p><p>BFC 的形成条件包括但不限于以下几点：</p><ol><li>根元素（HTML 文档的 <code>&lt;html&gt;</code> 元素）</li><li>浮动元素（<code>float</code> 值不为 <code>none</code>）</li><li>绝对定位元素（<code>position</code> 值为 <code>absolute</code> 或 <code>fixed</code>）</li><li><code>display</code> 值为 <code>inline-block</code>、<code>table-cells</code>、<code>flex</code></li><li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li><li><code>perspective</code> 属性非 <code>none</code></li><li><code>transform</code> 属性非 <code>none</code></li></ol><p>BFC 的特点：</p><ol><li><strong>独立的渲染区域</strong>：BFC 内部的布局不会影响到外部元素。在 BFC 中，两个相邻的 Box 的垂直距离由 <code>margin</code> 决定。属于同一个 BFC 的两个相邻 Box 的 <code>margin</code> 会发生重叠。</li><li><strong>计算 BFC 的高度时，会包含浮动元素</strong>：即使浮动元素没有清除（<code>clear</code> 属性），BFC 也会考虑到浮动元素的 <code>height</code> 和 <code>width</code>。</li><li><strong>BFC 可以阻止 <code>margin</code> 重叠</strong>：当两个相邻的 Box 都属于 BFC 时，它们的 <code>margin</code> 不会发生重叠。</li><li><strong>BFC 作为容器时，其 <code>padding</code> 和 <code>border</code> 不会与 float 的子元素重叠</strong>：即使子元素浮动，BFC 的内边距和边框也会包裹住它们。</li></ol><p>BFC 的应用场景：</p><ol><li><strong>清除内部浮动</strong>：当父元素需要包含浮动的子元素时，可以创建一个 BFC 来避免父元素的高度塌陷。</li><li><strong>防止外边距重叠</strong>：通过创建 BFC，可以避免相邻元素的外边距重叠。</li><li><strong>创建自适应两栏布局</strong>：通过设置两个相邻元素的宽度，并给其中一个元素创建 BFC，可以实现宽度自适应的两栏布局。</li><li><strong>避免元素被覆盖</strong>：当一个元素需要避免被浮动元素覆盖时，可以给该元素创建 BFC。</li></ol><p>BFC 是 CSS 布局中的一个重要概念，理解 BFC 的工作原理和特点，对于进行高效的布局设计和解决布局问题非常有帮助。</p>',31))])}const m=e(c,[["render",r]]);export{y as __pageData,m as default};
