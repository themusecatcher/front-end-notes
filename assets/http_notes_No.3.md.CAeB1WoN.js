import{_ as s,c as i,o as a,ab as t}from"./chunks/framework.B6eZocN-.js";const r=JSON.parse('{"title":"Note 3","description":"","frontmatter":{},"headers":[],"relativePath":"http/notes/No.3.md","filePath":"http/notes/No.3.md","lastUpdated":1727148717000}'),n={name:"http/notes/No.3.md"};function l(p,e,o,h,d,c){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="note-3" tabindex="-1">Note 3 <a class="header-anchor" href="#note-3" aria-label="Permalink to &quot;Note 3&quot;">​</a></h1><h2 id="keep-alive" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Keep-Alive" target="_blank" rel="noreferrer">Keep-Alive</a> <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;[Keep-Alive](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Keep-Alive)&quot;">​</a></h2><p><code>HTTP Keep-Alive</code> 响应标头和请求标头<strong>允许消息发送者提示连接的状态，还可以用来设置超时时长和最大请求数</strong>。</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>要使得 <code>Keep-Alive</code> 有效，消息必须包含 <code>Connection: keep-alive</code> 标头。</p></div><p><code>HTTP/1.0</code> 默认在每次请求/响应交互后关闭连接，因此 <code>HTTP/1.0</code> 中的持久连接必须经过明确协商。一些客户端和服务器可能希望与以前的持久连接方式兼容，可以使用 <code>Connection: keep-alive</code> 请求标头来实现这一点。连接的其他参数可通过 <code>Keep-Alive</code> 标头请求。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p><code>HTTP/2</code> 和 <code>HTTP/3</code> 禁止使用特定于连接的标头字段，如 <code>Connection</code> 和 <code>Keep-Alive</code>。<code>Chrome</code> 浏览器和 <code>Firefox</code> 浏览器在 <code>HTTP/2</code> 响应中忽略了它们，但 <code>Safari</code> 浏览器符合 <code>HTTP/2</code> 规范要求，不会加载任何包含它们的响应。</p></div><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;parameters&gt;</span></span></code></pre></div><h3 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h3><p><code>&lt;parameters&gt;</code>: 一系列用逗号隔开的参数，每一个参数由一个标识符和一个值构成，并使用等号（&#39;=&#39;）隔开。下述标识符是可用的：</p><ul><li><code>timeout</code>：指定了主机允许空闲连接保持打开状态的时长（以秒为单位的整数）。当主机没有接收或发送数据时，就认为连接是空闲的。主机可以保持连接超过 <code>timeout</code> 秒，但应该确保至少保持连接 <code>timeout</code> 秒。</li><li><code>max</code>：在此连接关闭之前，可以发送的请求的最大值。在非管道连接中，除了 <code>0</code> 以外，这个值是被忽略的，因为需要在紧跟着的响应中发送新一次的请求。<code>HTTP</code> 管道连接则可以用它来限制管道的使用。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><br><p>包含 <code>Keep-Alive</code> 标头的响应示例：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Keep-Alive</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Thu, 11 Aug 2016 15:23:13 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout=5, max=200</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Last-Modified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mon, 25 Jul 2016 04:32:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)</span></span></code></pre></div>`,15)]))}const g=s(n,[["render",l]]);export{r as __pageData,g as default};
