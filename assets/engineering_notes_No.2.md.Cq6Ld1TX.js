import{_ as o,c as d,o as c,ab as t}from"./chunks/framework.DVbW3bOC.js";const u=JSON.parse('{"title":"Note 2","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/notes/No.2.md","filePath":"engineering/notes/No.2.md","lastUpdated":1747821695000}'),i={name:"engineering/notes/No.2.md"};function l(a,e,s,r,n,h){return c(),d("div",null,e[0]||(e[0]=[t('<h1 id="note-2" tabindex="-1">Note 2 <a class="header-anchor" href="#note-2" aria-label="Permalink to &quot;Note 2&quot;">​</a></h1><h2 id="为什么-vite-比-webpack-更快" tabindex="-1">为什么 <code>Vite</code> 比 <code>Webpack</code> 更快？ <a class="header-anchor" href="#为什么-vite-比-webpack-更快" aria-label="Permalink to &quot;为什么 `Vite` 比 `Webpack` 更快？&quot;">​</a></h2><ul><li><p>开发模式的差异 在开发环境中， <code>Webpack</code> 是先打包再启动开发服务器，而 <code>Vite</code> 则是直接启动，然后再按需编译依赖文件。这意味着，当使用 <code>Webpack</code> 时，所有的模块都需要在开发前进行打包，这会增加启动时间和构建时间。而 <code>Vite</code> 采用了不同的策略，它会在浏览器请求模块时再进行实时编译，这种按需动态编译的模式极大地缩短了编译时间，特别是在大型项目中，文件数量众多，<code>Vite</code> 的优势更为明显。</p></li><li><p>对 <code>ES Module</code> 的支持 现代浏览器本身就支持 <code>ES Module</code>，会主动发起请求去获取所需文件，<code>Vite</code> 充分利用了这一点，将开发环境下的模块文件直接作为浏览器要执行的文件，而不是像 <code>Webpack</code> 那样先打包，再交给浏览器执行，这种方式减少了中间环节，提高了效率。</p><p><strong>ES Module</strong>：通过使用 <code>export</code> 和 <code>import</code> 语句，<code>ES Module</code> 允许在浏览器端导入和导出模块。当使用 <code>ES Module</code> 进行开发时，开发者实际上是在构建一个依赖关系图，不同依赖项之间通过导入语句进行关联。 主流浏览器（除 IE 外）均支持 <code>ES Module</code>，并且可以通过在 <code>&lt;script&gt;</code> 标签中设置 <code>type = &quot;module&quot;</code> 来加载模块，默认情况下，模块会延迟加载，执行时机在文档解析之后，触发 <code>DOMContentLoaded</code> 事件前。</p></li><li><p>低层语言的差异</p><ul><li><code>Webpack</code> 是基于 <code>Node.js</code> 构建的，而 <code>Vite</code> 是基于 <code>esbuild</code> 进行与构建依赖，<code>esbuild</code> 是采用 <code>Go</code> 语言编写的，<code>Go</code> 语言是纳秒级别的，而 <code>Node.js</code> 是毫秒级别的。因此，<code>Vite</code> 在打包速度上相比 <code>Webpack</code> 有 <code>10-100</code> 倍的提升。</li><li>预构建依赖：通常是指在项目启动或构建之前，对项目中所需的依赖项进行预先的处理或构建，这样做的好处在于，当项目实际运行时，可以直接使用这些已经预构建好的依赖，而无需再进行实时的编译或构建，从而提高了应用程序的运行速度和效率。</li></ul></li><li><p>热更新的处理 在 <code>Webpack</code> 中，当一个模块或其依赖的模块内容改变时，需要重新编译这些模块。而在 <code>Vite</code> 中，当某个模块内容改变时，只需要让浏览器重新请求该模块即可，这大大减少了热更新的时间。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">总结</p><p>总的来说，<code>Vite</code> 之所以比 <code>Webpack</code> 快，主要是因为它采用了不同的开发模式、充分利用了现代浏览器的对 <code>ES Module</code> 支持、使用了更高效的底层语言、并优化了热更新的处理。这些特点使得 <code>Vite</code> 在大型项目中具有显著的优势，能够快速启动和构建，提高开发效率。</p></div><h2 id="webpack-与-vite-的核心差异" tabindex="-1"><code>Webpack</code> 与 <code>Vite</code> 的核心差异 <a class="header-anchor" href="#webpack-与-vite-的核心差异" aria-label="Permalink to &quot;`Webpack` 与 `Vite` 的核心差异&quot;">​</a></h2><ol><li>开发模式</li></ol><ul><li><code>Webpack</code>：基于传统打包机制，启动时需分析所有模块依赖并打包成一个或多个 <code>Bundle</code>（如 <code>app.js</code>），导致冷启动时间较长，尤其在大型项目中可能需数分钟。</li><li><code>Vite</code>：利用浏览器原生支持的 <code>ES Modules（ESM）</code>，按需编译模块。开发服务器直接启动，仅在浏览器请求时编译对应文件，冷启动时间通常仅需几百毫秒。</li></ul><ol start="2"><li>构建效率</li></ol><ul><li><code>Webpack</code>：全量打包所有模块，生成单一 <code>Bundle</code>，初次加载时间较长；热更新（HMR）需重新编译依赖链，更新延迟随项目规模增大而增加。</li><li><code>Vite</code>：仅编译改动的模块，利用浏览器缓存机制（如强缓存依赖、协商缓存源码），<code>HMR</code> 更新速度几乎即时（<code>&lt;100ms</code>），且生产环境使用 <code>Rollup</code> 生成扁平化代码。</li></ul><ol start="3"><li>生态系统与配置</li></ol><ul><li><code>Webpack</code>：插件生态极其丰富（如 <code>Loader</code>、<code>Code Splitting</code>、<code>Tree Shaking</code>），支持高度定制化，但配置复杂，学习曲线陡峭。</li><li><code>Vite</code>：配置简洁，开箱即用（如内置 <code>TypeScript</code>、<code>CSS</code> 预处理器支持），但插件生态尚不成熟，部分功能依赖社区插件。</li></ul><ol start="4"><li>底层语言与工具链</li></ol><ul><li><code>Webpack</code>：基于 <code>Node.js</code> 实现，依赖 <code>JS</code> 生态工具链，编译速度受限于 <code>JS</code> 性能（毫秒级）。</li><li><code>Vite</code>：预构建依赖使用 <code>Go</code> 语言编写的 <code>esbuild</code>（纳秒级速度），编译效率提升 <code>10-100</code> 倍。</li></ul><h2 id="vite-为何比-webpack-快" tabindex="-1">Vite 为何比 Webpack 快？ <a class="header-anchor" href="#vite-为何比-webpack-快" aria-label="Permalink to &quot;Vite 为何比 Webpack 快？&quot;">​</a></h2><ol><li>原生 <code>ESM</code> 支持 现代浏览器直接解析 <code>ES</code> 模块，<code>Vite</code> 开发环境下无需打包，直接返回源码，省去传统构建的打包时间。</li><li>按需编译与缓存优化 仅在浏览器请求时编译对应模块，结合强缓存（依赖文件，指安装的第三方库，如 <code>vue</code>、<code>react</code>、<code>lodash</code> 等）与协商缓存（源码文件，是开发者自己编写的代码，通常位于 <code>src</code> 目录下），减少重复编译和网络请求。</li><li>高性能工具链 依赖预构建采用 <code>esbuild</code>（<code>Go</code> 语言编写），编译速度远超 <code>Webpack</code> 的 <code>JS</code> 工具链，例如预构建依赖耗时从秒级降至毫秒级。</li><li>高效热更新 <code>HMR</code> 基于原生 <code>ESM</code>，仅需更新修改的模块及其依赖链，避免 <code>Webpack</code> 的全量重新打包。</li></ol><h2 id="vite-是如何利用浏览器缓存的" tabindex="-1">Vite 是如何利用浏览器缓存的？ <a class="header-anchor" href="#vite-是如何利用浏览器缓存的" aria-label="Permalink to &quot;Vite 是如何利用浏览器缓存的？&quot;">​</a></h2><p>在 <code>Vite</code> 中，浏览器缓存的利用是其热更新（HMR）高效运行的关键机制之一，具体体现在以下几个方面：</p><ol><li>原生 <code>ESM</code> 的模块缓存</li></ol><p>浏览器在加载原生 <code>ES</code> 模块（<code>ESM</code>）时，会默认缓存已请求的模块文件。这种缓存机制在常规开发中可能导致代码更新后浏览器仍使用旧版本。<code>Vite</code> 通过以下策略解决这一问题：</p><ul><li><p>缓存破坏（Cache Busting）： <code>Vite</code> 在开发模式下为每个模块的导入 <code>URL</code> 附加唯一标识符（如时间戳或哈希值），例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.js?t=1623987623457&#39;</span></span></code></pre></div><p>每次文件修改后，<code>URL</code> 的查询参数会变化，强制浏览器重新请求最新代码，绕过缓存。</p></li></ul><ol start="2"><li><code>HTTP</code> 缓存控制 <code>Vite</code> 的开发服务器（vite serve）通过设置 <code>HTTP</code> 响应头，明确控制浏览器缓存行为：</li></ol><ul><li><code>Cache-Control</code>: （<code>no-cache</code> 或 <code>max-age=0</code>）： 告知浏览器可以缓存资源，但每次使用前必须向服务器验证内容是否过期（即“协商缓存”）。</li><li><code>ETag</code> 与 <code>Last-Modified</code>（均由服务器提供）： 服务器为每个模块生成唯一标识符（如文件哈希 <code>ETag</code> 或 最后修改时间 <code>Last-Modified</code>），浏览器后续请求时会携带这些信息，服务器据此判断是否返回新内容（<code>304 Not Modified</code> 或 <code>200 OK</code> 和新的资源）。</li></ul><h3 id="last-modified" tabindex="-1">Last-Modified <a class="header-anchor" href="#last-modified" aria-label="Permalink to &quot;Last-Modified&quot;">​</a></h3><br><p>表示资源最后修改的时间，浏览器在请求时会通过 <code>If-Modified-Since</code> 头将这个时间发送给服务器，服务器会对比本地资源的最后修改时间，如果时间未改变，就返回 <code>304</code> 状态码，告知浏览器可以使用本地缓存；如果时间改变了，就返回 <code>200</code> 状态码、新的资源和响应的 <code>Last-Modified</code>。</p><h3 id="etag" tabindex="-1">ETag <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;ETag&quot;">​</a></h3><br><p>是服务器为资源生成的一个唯一标识符，类似于资源的指纹。浏览器在请求时通过 <code>If-None-Match</code> 头发送 <code>ETag</code> 值，服务器对比本地资源的 <code>ETag</code>，如果相同就返回 <code>304</code>，否则返回 <code>200</code> 状态码、新的资源和对应的资源 <code>ETag</code>。</p><ul><li>强缓存：浏览器直接使用本地缓存，不向服务器发送请求，常见 <code>HTTP</code> 头：<code>Expires</code>、<code>Cache-Control: max-age=秒数</code></li><li>协商缓存：浏览器向服务器发送请求验证缓存有效性，若缓存有效则返回 <code>304</code>，否则返回新资源，常见 <code>HTTP</code> 头：<code>ETag</code>、<code>Last-Modified</code>、<code>Cache-Control: no-cache</code></li></ul><ol start="3"><li>模块热替换（HMR）的协作 当文件发生修改时，<code>Vite</code> 的 <code>HMR</code> 流程会精准更新模块，同时利用缓存优化性能：</li></ol><ul><li>监听文件变化：<code>Vite</code> 通过文件系统监听（如 <code>chokidar</code>）实时检测代码变更。</li><li>推送更新信号：通过 <code>WebSocket</code> 通知浏览器哪些模块需要更新。</li><li>按需获取新模块：浏览器仅重新请求发生变更的模块（而非整个应用），新模块的 <code>URL</code> 因唯一标识符变化而绕过缓存。</li><li>保留有效缓存：未修改的模块仍从浏览器缓存读取，减少网络请求，提升加载速度。</li></ul><ol start="4"><li>开发与生产环境的差异</li></ol><ul><li>开发环境： 缓存破坏和 <code>no-cache</code> 策略确保实时性，牺牲缓存效率换取即时更新。</li><li>生产环境： <code>Vite</code> 构建时会为文件生成哈希文件名，如 <code>main.abc123.js</code>，利用强缓存（<code>Cache-Control: max-age=31536000</code>）长期缓存未修改的文件，提升性能。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>Vite</code> 中的“浏览器缓存”具体指：</p><ol><li>通过唯一 <code>URL</code> 标识符绕过浏览器对 <code>ESM</code> 的旧版本缓存。</li><li>利用 <code>HTTP</code> 缓存控制头精细化管理缓存策略。</li><li>在 <code>HMR</code> 过程中按需更新模块，结合缓存机制实现高效的热更新。</li></ol><p>这种设计既保障了开发时的实时性，又能在生产环境中利用缓存优化加载速度。</p><h2 id="vite-中的依赖文件和源码文件的缓存策略" tabindex="-1"><code>Vite</code> 中的依赖文件和源码文件的缓存策略 <a class="header-anchor" href="#vite-中的依赖文件和源码文件的缓存策略" aria-label="Permalink to &quot;`Vite` 中的依赖文件和源码文件的缓存策略&quot;">​</a></h2><p>在 <code>Vite</code> 中，<strong>依赖文件</strong>和<strong>源码文件</strong>的缓存策略设计是其高效开发的核心机制之一，具体含义和缓存逻辑如下：</p><h3 id="一、依赖文件-强缓存" tabindex="-1">一、依赖文件（强缓存） <a class="header-anchor" href="#一、依赖文件-强缓存" aria-label="Permalink to &quot;一、依赖文件（强缓存）&quot;">​</a></h3><h4 id="_1-依赖文件是什么" tabindex="-1">1. 依赖文件是什么？ <a class="header-anchor" href="#_1-依赖文件是什么" aria-label="Permalink to &quot;1. 依赖文件是什么？&quot;">​</a></h4><ul><li>定义：依赖文件指的是通过 <code>npm</code>/<code>yarn</code> 安装的第三方库（如 <code>vue</code>、<code>react</code>、<code>lodash</code> 等），通常位于 <code>node_modules</code> 目录中。</li><li>特点： <ul><li>代码稳定，开发过程中<strong>极少频繁修改</strong>。</li><li>体积较大（尤其大型库），重复编译会影响性能。</li></ul></li></ul><h4 id="_2-为何使用强缓存" tabindex="-1">2. 为何使用强缓存？ <a class="header-anchor" href="#_2-为何使用强缓存" aria-label="Permalink to &quot;2. 为何使用强缓存？&quot;">​</a></h4><ul><li><strong>减少编译开销</strong>：<code>Vite</code> 在首次启动时会对依赖进行<strong>预构建</strong>（<code>Pre-Bundling</code>），将分散的 <code>CommonJS/UMD</code> 模块转换为 <code>ESM</code> 格式，并打包成单个文件（如 <code>vue.js</code>）。这些预构建的依赖文件会被标记为<strong>强缓存</strong>。</li><li><strong>避免重复请求</strong>：通过 <code>Cache-Control: max-age=31536000,immutable</code> 等响应头，浏览器会长期缓存这些文件，<strong>直接使用本地副本，不发送网络请求</strong>。</li></ul><h4 id="_3-强缓存的实际表现" tabindex="-1">3. 强缓存的实际表现 <a class="header-anchor" href="#_3-强缓存的实际表现" aria-label="Permalink to &quot;3. 强缓存的实际表现&quot;">​</a></h4><ul><li><p><strong>HTTP 响应头示例</strong>：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=31536000, immutable</span></span></code></pre></div></li><li><p><strong>行为</strong>：</p><ul><li>浏览器在缓存过期前（如 <code>1年</code>）直接使用本地文件，<strong>不向服务器发起请求</strong>。</li><li>即使刷新页面或重启开发服务器，依赖文件也不会重新编译或加载。</li></ul></li></ul><hr><h3 id="二、源码文件-协商缓存" tabindex="-1">二、源码文件（协商缓存） <a class="header-anchor" href="#二、源码文件-协商缓存" aria-label="Permalink to &quot;二、源码文件（协商缓存）&quot;">​</a></h3><h4 id="_1-源码文件是什么" tabindex="-1">1. 源码文件是什么？ <a class="header-anchor" href="#_1-源码文件是什么" aria-label="Permalink to &quot;1. 源码文件是什么？&quot;">​</a></h4><ul><li><strong>定义</strong>：源码文件是开发者自己编写的代码，通常位于 <code>src</code> 目录下，包括： <ul><li>业务逻辑文件（<code>.js</code>/<code>.ts</code>）。</li><li>组件文件（<code>.vue</code>/<code>.jsx</code>/<code>.tsx</code>）。</li><li>样式文件（<code>.css</code>/<code>.scss</code>）。</li><li>其他静态资源（如图片、JSON 等）。</li></ul></li><li><strong>特点</strong>： <ul><li>代码<strong>频繁修改</strong>，需要实时更新到浏览器。</li><li>体积较小，按需编译。</li></ul></li></ul><h4 id="_2-为何使用协商缓存" tabindex="-1">2. 为何使用协商缓存？ <a class="header-anchor" href="#_2-为何使用协商缓存" aria-label="Permalink to &quot;2. 为何使用协商缓存？&quot;">​</a></h4><ul><li><strong>实时更新</strong>：源码文件修改后，<code>Vite</code> 需确保浏览器立即获取最新版本。</li><li><strong>减少重复编译</strong>：仅当文件内容变化时重新编译，未修改的文件沿用缓存。</li></ul><h4 id="_3-协商缓存的实际实现" tabindex="-1">3. 协商缓存的实际实现 <a class="header-anchor" href="#_3-协商缓存的实际实现" aria-label="Permalink to &quot;3. 协商缓存的实际实现&quot;">​</a></h4><ul><li><p><strong>HTTP 响应头示例</strong>：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-cache</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ETag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x234dff&quot;</span></span></code></pre></div></li><li><p><strong>行为</strong>：</p><ol><li>浏览器请求源码文件时，携带 <code>If-None-Match</code>（<code>ETag</code> 值）或 <code>If-Modified-Since</code>（<code>Last-Modified</code> 最后修改时间）。</li><li><code>Vite</code> 服务器检查文件是否变化：</li></ol><ul><li><strong>未变化</strong> → 返回 <code>304 Not Modified</code>，浏览器使用本地缓存。</li><li><strong>已变化</strong> → 返回 <code>200 OK</code> 和新内容，浏览器更新缓存。</li></ul></li><li><p><strong>Vite 的优化</strong>：</p><ul><li><strong>按需编译</strong>：仅在浏览器请求某个源码文件时，<code>Vite</code> 才编译它（如访问 <code>/src/App.vue</code> 时编译该组件）。</li><li><strong>HMR 热更新</strong>：文件修改后，通过 <code>WebSocket</code> 通知浏览器精确更新模块，而非刷新整个页面。</li></ul></li></ul><hr><h3 id="三、缓存策略对开发效率的影响" tabindex="-1">三、缓存策略对开发效率的影响 <a class="header-anchor" href="#三、缓存策略对开发效率的影响" aria-label="Permalink to &quot;三、缓存策略对开发效率的影响&quot;">​</a></h3><table tabindex="0"><thead><tr><th>文件类型</th><th>缓存策略</th><th>优势</th><th>示例场景</th></tr></thead><tbody><tr><td>依赖文件</td><td>强缓存</td><td>避免重复预构建，减少冷启动时间，提升加载速度</td><td>安装 <code>lodash</code> 后，首次加载后不再请求</td></tr><tr><td>源码文件</td><td>协商缓存</td><td>按需编译 + 即时更新，保留未修改文件的缓存，减少编译和网络开销</td><td>修改 <code>App.vue</code> 后，仅该文件重新编译加载</td></tr></tbody></table><h3 id="四、生产环境与开发环境的区别" tabindex="-1">四、生产环境与开发环境的区别 <a class="header-anchor" href="#四、生产环境与开发环境的区别" aria-label="Permalink to &quot;四、生产环境与开发环境的区别&quot;">​</a></h3><ol><li><p><strong>生产环境</strong>：</p><ul><li>所有文件（依赖和源码）经过构建打包，生成带有哈希的文件名（如 <code>vendor.abcd123.js</code>）。</li><li>使用强缓存（<code>Cache-Control: max-age=31536000,immutable</code>），利用浏览器长期缓存。</li><li>文件内容变化时，哈希值变化，自动触发缓存失效。</li></ul></li><li><p><strong>开发环境</strong>：</p><ul><li>依赖文件强缓存，源码文件协商缓存，保持高效的热更新（HMR）。</li><li>源码文件通过 <code>URL</code> 参数（如 <code>?t=1623987623457</code>）或 <code>ETag</code> 控制缓存，确保实时性。</li></ul></li></ol><hr><h3 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h3><ul><li><strong>依赖文件（强缓存）</strong>：第三方库代码，预构建后长期缓存，避免重复加载和编译。</li><li><strong>源码文件（协商缓存）</strong>：开发者编写的代码，按需编译 + 即时更新，平衡实时性和性能。</li></ul><p>这种设计使得 <code>Vite</code> 在开发模式下既能<strong>快速冷启动</strong>，又能通过 <code>HMR</code> 实现<strong>毫秒级的热更新</strong>，同时减少不必要的网络请求和编译开销。</p><h2 id="冷启动和热更新" tabindex="-1">冷启动和热更新 <a class="header-anchor" href="#冷启动和热更新" aria-label="Permalink to &quot;冷启动和热更新&quot;">​</a></h2><ol><li>冷启动（Cold Start）定义：冷启动指从零开始启动开发服务器（如运行 <code>npm run dev</code>）的过程，此时没有任何缓存或预构建的代码。</li></ol><ul><li><p><code>Vite</code> 的冷启动：</p><ul><li>原理：基于原生 <code>ES Modules</code>（ESM），直接利用浏览器解析模块，无需预先打包所有代码。 优势：</li><li>快速冷启动：仅需启动开发服务器和预构建少量依赖（如 <code>CommonJS</code> 包）。</li><li>按需编译：浏览器根据路由动态请求源码，<code>Vite</code> 仅编译当前页面所需的模块。</li><li>适用场景：适合大型项目，启动时间几乎与项目规模无关。</li></ul></li><li><p><code>Webpack</code> 的冷启动</p><ul><li>原理：需先打包整个应用的所有模块（生成 <code>bundle</code>），再启动开发服务器。 劣势：</li><li>启动慢：项目越大，打包时间越长。</li><li>内存占用高：需在内存中生成完整依赖图。</li><li>适用场景：小型项目影响小，大型项目启动时间线性增长。</li></ul></li></ul><ol start="2"><li>热启动（<code>Hot Start</code>）/ 热更新（<code>HMR</code>）定义：热启动（通常指热模块替换，<code>HMR</code>）指在代码修改后，仅更新修改的模块，无需刷新页面或重启服务。</li></ol><ul><li><p><code>Vite</code> 的热更新（HMR）：</p><ul><li>原理：基于原生 <code>ESM</code> 和浏览器缓存，利用轻量级的 <code>HMR</code> 协议。</li></ul><p>优势：</p><ul><li>更新快：仅重编译修改的单个文件，通过浏览器缓存避免重复请求。</li><li>低开销：无需重新构建依赖图。</li><li>示例：修改一个 <code>Vue</code> 组件，仅该组件重新加载，页面状态保留。</li></ul></li><li><p><code>Webpack</code> 的热更新（<code>HMR</code>）：</p><ul><li>原理：需重新构建模块依赖链，通过 <code>WebSocket</code> 推送更新后的代码块（<code>chunk</code>）。</li></ul><p>劣势：</p><ul><li>更新较慢：需重新打包修改模块及其依赖链。</li><li>内存消耗：维护完整的模块依赖图。</li><li>示例：修改一个 <code>CSS</code> 文件，<code>Webpack</code> 需重新计算样式依赖链。</li></ul></li></ul><ol start="3"><li>核心差异总结</li></ol><table tabindex="0"><thead><tr><th>特性</th><th>Vite</th><th>Webpack</th></tr></thead><tbody><tr><td>冷启动</td><td>秒级启动（按需编译）</td><td>分钟级启动（全量打包）</td></tr><tr><td>热更新</td><td>毫秒级更新（基于 <code>ESM</code>）</td><td>秒级更新（依赖链分析）</td></tr><tr><td>构建理念</td><td>开发环境用 <code>ESM</code>，生产用 <code>Rollup</code></td><td>开发和生产均基于打包（<code>bundle</code>）</td></tr><tr><td>适用场景</td><td>大型项目、现代浏览器</td><td>兼容旧浏览器、复杂构建需求</td></tr></tbody></table><ol start="4"><li>选择建议</li></ol><ul><li>追求开发速度：选 <code>Vite</code>（尤其 <code>React/Vue</code> 项目）。</li><li>需要深度定制：选 <code>Webpack</code>（如复杂代码分割、旧浏览器支持）。</li><li>混合使用：开发用 <code>Vite</code>，生产用 <code>Webpack</code>（需额外配置）。</li></ul><p><code>Vite</code> 通过利用现代浏览器特性（<code>ESM</code>）解决了传统打包工具（如 <code>Webpack</code>）在开发阶段的性能瓶颈，而 <code>Webpack</code> 在生态和兼容性上仍有不可替代性。</p><h2 id="vite-和-webpack-热更新-hmr" tabindex="-1"><code>Vite</code> 和 <code>Webpack</code> 热更新（HMR） <a class="header-anchor" href="#vite-和-webpack-热更新-hmr" aria-label="Permalink to &quot;`Vite` 和 `Webpack` 热更新（HMR）&quot;">​</a></h2><p><code>Vite</code> 和 <code>Webpack</code> 都支持热更新（<code>HMR</code>），但两者的实现原理和性能表现存在显著差异。</p><h3 id="一、基础机制" tabindex="-1">一、基础机制 <a class="header-anchor" href="#一、基础机制" aria-label="Permalink to &quot;一、基础机制&quot;">​</a></h3><ol><li><p><strong>Vite</strong></p><ul><li><strong>原生 ESM 动态加载</strong>：在开发模式下直接以原生 <code>ESM</code> 格式向浏览器提供源码，浏览器按需请求模块，无需预打包。这种设计使得文件修改时只需重新加载受影响的模块，而非全量更新。</li><li><strong>模块依赖图</strong>：通过 <code>ModuleGraph</code>（包含 <code>URL</code>、<code>ID</code>、文件路径的映射关系）快速定位变更模块的依赖边界，仅更新相关模块。</li><li><strong>WebSocket 通信</strong>：开发服务器与浏览器通过 <code>WebSocket</code> 实时通信，变更后直接通知浏览器重新请求特定模块。</li></ul></li><li><p><strong>Webpack</strong></p><ul><li><strong>打包后热更新</strong>：开发模式下仍需打包代码，生成 <code>hot-update.js</code> 增量文件，通过 <code>WebSocket</code> 通知浏览器替换旧模块。</li><li><strong>依赖全量分析</strong>：文件修改后需重新编译模块并计算依赖链，生成包含更新代码的 <code>hot-update.json</code>，再由浏览器加载替换。</li></ul></li></ol><h3 id="二、热更新流程对比" tabindex="-1">二、热更新流程对比 <a class="header-anchor" href="#二、热更新流程对比" aria-label="Permalink to &quot;二、热更新流程对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>步骤</strong></th><th><strong>Vite</strong></th><th><strong>Webpack</strong></th></tr></thead><tbody><tr><td><strong>文件监听</strong></td><td>使用 <code>chokidar</code> 库监听文件变化，无需重新打包。</td><td>通过 <code>webpack-dev-server</code> 监听文件变化，触发增量编译。</td></tr><tr><td><strong>变更处理</strong></td><td>直接通过 <code>HTTP</code> 提供新模块，浏览器按需加载。</td><td>重新编译模块并生成 <code>hot-update.js</code>，通过 <code>WebSocket</code> 传输。</td></tr><tr><td><strong>模块替换</strong></td><td>浏览器直接重新请求更新模块，无额外文件生成。</td><td>依赖 <code>module.hot.accept()</code> 接口替换旧模块，需处理 <code>hot-update.js</code>。</td></tr><tr><td><strong>状态保留</strong></td><td>通过 <code>import.meta.hot</code> <code>API</code> 管理模块生命周期（如 <code>dispose()</code> 清理旧状态）。</td><td>需手动在模块中定义 <code>module.hot.accept()</code> 回调以保留状态。</td></tr></tbody></table><h3 id="三、性能差异" tabindex="-1">三、性能差异 <a class="header-anchor" href="#三、性能差异" aria-label="Permalink to &quot;三、性能差异&quot;">​</a></h3><ol><li><p><strong>速度</strong></p><ul><li><strong>Vite</strong>：冷启动极快（数秒内），热更新几乎即时。得益于原生 <code>ESM</code> 和按需加载，仅处理变更文件，无打包开销。</li><li><strong>Webpack</strong>：冷启动较慢（需全量打包），热更新延迟较高（需重新编译并生成增量文件）。</li></ul></li><li><p><strong>资源消耗</strong></p><ul><li><strong>Vite</strong>：<code>CPU</code> 计算量低，浏览器承担模块解析任务，减少服务端负载。</li><li><strong>Webpack</strong>：频繁的编译和依赖分析导致 <code>CPU</code> 占用较高，大项目可能性能衰减。</li></ul></li></ol><h3 id="四、配置与生态" tabindex="-1">四、配置与生态 <a class="header-anchor" href="#四、配置与生态" aria-label="Permalink to &quot;四、配置与生态&quot;">​</a></h3><ol><li><p><strong>配置复杂度</strong></p><ul><li><strong>Vite</strong>：开箱即用，内置 <code>HMR</code> 支持，框架插件（如 <code>Vue、React</code>）自动处理模块更新逻辑。</li><li><strong>Webpack</strong>：需手动配置 <code>webpack-dev-server</code> 和 <code>HotModuleReplacementPlugin</code>，模块需支持 <code>HMR</code> 接口。</li></ul></li><li><p><strong>生态支持</strong></p><ul><li><strong>Vite</strong>：依赖现代浏览器 <code>ESM</code> 支持，对旧浏览器兼容性差，但社区插件逐渐丰富。</li><li><strong>Webpack</strong>：生态成熟，支持复杂项目定制（如自定义 <code>Loader</code>、<code>Plugin</code>），兼容性更广。</li></ul></li></ol><h3 id="五、适用场景" tabindex="-1">五、适用场景 <a class="header-anchor" href="#五、适用场景" aria-label="Permalink to &quot;五、适用场景&quot;">​</a></h3><ul><li><strong>Vite</strong>：适合现代前端框架（<code>Vue/React</code>）、中小型项目及需要快速迭代的开发环境。</li><li><strong>Webpack</strong>：适合大型复杂项目、需要深度定制构建流程或兼容旧浏览器的场景。</li></ul><h3 id="websocket-的核心作用" tabindex="-1">WebSocket 的核心作用 <a class="header-anchor" href="#websocket-的核心作用" aria-label="Permalink to &quot;WebSocket 的核心作用&quot;">​</a></h3><br><p>在 <code>Vite</code> 和 <code>Webpack</code> 中，<code>WebSocket</code> 均用于<strong>实现服务端与客户端的实时通信，传递文件变更通知和更新内容</strong>。差异在于：</p><ul><li><code>Vite</code>：依赖原生 <code>ESM</code> 动态加载，<code>WebSocket</code> 仅传递变更路径，浏览器直接重新请求模块。</li><li><code>Webpack</code>：需传输增量文件（<code>hot-update.js</code>），客户端通过 <code>HMR</code> 运行时替换模块。</li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>Vite</strong></th><th><strong>Webpack</strong></th></tr></thead><tbody><tr><td><strong>核心原理</strong></td><td>原生 <code>ESM</code> + 按需加载</td><td>打包后增量更新 + 依赖分析</td></tr><tr><td><strong>更新速度</strong></td><td>极快（无打包开销）</td><td>较慢（需重新编译）</td></tr><tr><td><strong>配置复杂度</strong></td><td>低（开箱即用）</td><td>高（需手动配置插件）</td></tr><tr><td><strong>生态成熟度</strong></td><td>新兴，适合现代项目</td><td>成熟，适合复杂需求</td></tr></tbody></table><p>选择建议：<strong>追求开发效率选 Vite，需要深度定制或兼容性选 Webpack</strong>。</p><h2 id="为何仍有大量项目使用-webpack" tabindex="-1">为何仍有大量项目使用 <code>Webpack</code> ？ <a class="header-anchor" href="#为何仍有大量项目使用-webpack" aria-label="Permalink to &quot;为何仍有大量项目使用 `Webpack` ？&quot;">​</a></h2><ol><li>成熟生态与插件支持 <code>Webpack</code> 拥有庞大的社区和插件库（如 <code>Babel</code>、<code>Sass</code> 等），覆盖复杂场景（如微前端、<code>SSR</code>），而 <code>Vite</code> 生态仍在发展中。</li><li>生产环境优化能力 <code>Webpack</code> 的代码分割、<code>Tree Shaking</code>、缓存策略等生产优化功能更成熟，<code>Vite</code> 生产构建依赖 <code>Rollup</code>，部分场景（如复杂 <code>CSS</code> 处理）仍需额外配置。</li><li>历史项目兼容性 旧项目基于 <code>CommonJS</code> 或非 <code>ESM</code> 规范，迁移至 <code>Vite</code> 需改造模块系统，成本较高。</li><li>企业级需求适配 大型企业项目需要高度定制化构建流程（如多入口、动态 <code>Polyfill</code>），<code>Webpack</code> 的灵活性更适配此类需求。</li></ol><h3 id="总结与选型建议" tabindex="-1">总结与选型建议 <a class="header-anchor" href="#总结与选型建议" aria-label="Permalink to &quot;总结与选型建议&quot;">​</a></h3><ul><li><code>Vite</code> 适用场景：中小型项目、快速原型开发、<code>Vue/React</code> 现代框架项目，追求极速启动与热更新。</li><li><code>Webpack</code> 适用场景：大型复杂项目、需要深度定制化构建流程、依赖丰富插件生态的场景</li></ul>',96)]))}const g=o(i,[["render",l]]);export{u as __pageData,g as default};
