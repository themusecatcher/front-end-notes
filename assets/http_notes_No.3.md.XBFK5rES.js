import{_ as a,C as e,c as n,o as l,j as i,G as o,ac as d,a as r}from"./chunks/framework.DsTXiSNn.js";const b=JSON.parse('{"title":"Note 3","description":"","frontmatter":{},"headers":[],"relativePath":"http/notes/No.3.md","filePath":"http/notes/No.3.md","lastUpdated":1747811107000}'),h={name:"http/notes/No.3.md"};function p(c,s,k,g,E,u){const t=e("BackTop");return l(),n("div",null,[s[0]||(s[0]=i("h1",{id:"note-3",tabindex:"-1"},[r("Note 3 "),i("a",{class:"header-anchor",href:"#note-3","aria-label":'Permalink to "Note 3"'},"​")],-1)),o(t),s[1]||(s[1]=d(`<h2 id="keep-alive" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Keep-Alive" target="_blank" rel="noreferrer">Keep-Alive</a> <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;[Keep-Alive](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Keep-Alive)&quot;">​</a></h2><p><code>HTTP Keep-Alive</code> 响应标头和请求标头<strong>允许消息发送者提示连接的状态，还可以用来设置超时时长和最大请求数</strong>。</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>要使得 <code>Keep-Alive</code> 有效，消息必须包含 <code>Connection: keep-alive</code> 标头。</p></div><p><code>HTTP/1.0</code> 默认在每次请求/响应交互后关闭连接，因此 <code>HTTP/1.0</code> 中的持久连接必须经过明确协商。一些客户端和服务器可能希望与以前的持久连接方式兼容，可以使用 <code>Connection: keep-alive</code> 请求标头来实现这一点。连接的其他参数可通过 <code>Keep-Alive</code> 标头请求。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p><code>HTTP/2</code> 和 <code>HTTP/3</code> 禁止使用特定于连接的标头字段，如 <code>Connection</code> 和 <code>Keep-Alive</code>。<code>Chrome</code> 浏览器和 <code>Firefox</code> 浏览器在 <code>HTTP/2</code> 响应中忽略了它们，但 <code>Safari</code> 浏览器符合 <code>HTTP/2</code> 规范要求，不会加载任何包含它们的响应。</p></div><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;parameters&gt;</span></span></code></pre></div><h3 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h3><p><code>&lt;parameters&gt;</code>: 一系列用逗号隔开的参数，每一个参数由一个标识符和一个值构成，并使用等号（&#39;=&#39;）隔开。下述标识符是可用的：</p><ul><li><code>timeout</code>：指定了主机允许空闲连接保持打开状态的时长（以秒为单位的整数）。当主机没有接收或发送数据时，就认为连接是空闲的。主机可以保持连接超过 <code>timeout</code> 秒，但应该确保至少保持连接 <code>timeout</code> 秒。</li><li><code>max</code>：在此连接关闭之前，可以发送的请求的最大值。在非管道连接中，除了 <code>0</code> 以外，这个值是被忽略的，因为需要在紧跟着的响应中发送新一次的请求。<code>HTTP</code> 管道连接则可以用它来限制管道的使用。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><br><p>包含 <code>Keep-Alive</code> 标头的响应示例：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Keep-Alive</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Thu, 11 Aug 2016 15:23:13 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout=5, max=200</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Last-Modified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mon, 25 Jul 2016 04:32:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)</span></span></code></pre></div><h2 id="浏览器的跨域" tabindex="-1">浏览器的跨域 <a class="header-anchor" href="#浏览器的跨域" aria-label="Permalink to &quot;浏览器的跨域&quot;">​</a></h2><p>浏览器存在跨域限制的核心原因是 <strong>安全策略</strong>，而本地开发时不存在跨域问题是因为开发者通常会通过特定技术手段绕过限制。</p><h3 id="跨域限制的本质" tabindex="-1">跨域限制的本质 <a class="header-anchor" href="#跨域限制的本质" aria-label="Permalink to &quot;跨域限制的本质&quot;">​</a></h3><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noreferrer">浏览器的同源策略</a></p><p>它能帮助阻隔恶意文档，减少可能被攻击的媒介。例如，它可以防止互联网上的恶意网站在浏览器中运行 <code>JS</code> 脚本，从第三方网络邮件服务（用户已登录）或公司内网（因没有公共 <code>IP</code> 地址而受到保护，不会被攻击者直接访问）读取数据，并将这些数据转发给攻击者。</p><ul><li>源的定义</li></ul><p>如果两个 <code>URL</code> 的协议、端口（如果有指定的话）和主机都相同的话，则这两个 <code>URL</code> 是同源的。这个方案也被称为“协议/主机/端口元组”，或者直接是“元组”。（“元组”是指一组项目构成的整体，具有双重/三重/四重/五重等通用形式。）</p><h3 id="一、浏览器的跨域限制本质-同源策略-same-origin-policy" tabindex="-1">一、浏览器的跨域限制本质：同源策略（Same-Origin Policy） <a class="header-anchor" href="#一、浏览器的跨域限制本质-同源策略-same-origin-policy" aria-label="Permalink to &quot;一、浏览器的跨域限制本质：同源策略（Same-Origin Policy）&quot;">​</a></h3><h4 id="_1-为什么需要跨域限制" tabindex="-1">1. <strong>为什么需要跨域限制？</strong> <a class="header-anchor" href="#_1-为什么需要跨域限制" aria-label="Permalink to &quot;1. **为什么需要跨域限制？**&quot;">​</a></h4><ul><li><strong>安全防护</strong>：防止恶意网站通过脚本窃取用户敏感数据（如 Cookie、LocalStorage）。</li><li><strong>隔离风险</strong>：避免跨站脚本攻击（XSS）、跨站请求伪造（<code>CSRF</code>）等安全漏洞。</li></ul><h4 id="_2-同源策略的判定规则" tabindex="-1">2. <strong>同源策略的判定规则</strong> <a class="header-anchor" href="#_2-同源策略的判定规则" aria-label="Permalink to &quot;2. **同源策略的判定规则**&quot;">​</a></h4><ul><li><strong>同源条件</strong>：协议（HTTP/HTTPS）、域名（主域+子域）、端口 <strong>三者完全相同</strong>。</li><li><strong>示例</strong>：<table tabindex="0"><thead><tr><th>URL</th><th>与 <code>http://example.com/page</code> 是否同源</th></tr></thead><tbody><tr><td><code>http://example.com/page2</code></td><td>✅ 同源（仅路径不同）</td></tr><tr><td><code>https://example.com/page</code></td><td>❌ 协议不同（HTTP vs HTTPS）</td></tr><tr><td><code>http://sub.example.com/page</code></td><td>❌ 域名不同（主域 vs 子域）</td></tr><tr><td><code>http://example.com:8080/page</code></td><td>❌ 端口不同（80 vs 8080）</td></tr></tbody></table></li></ul><h4 id="_3-受同源策略限制的操作" tabindex="-1">3. <strong>受同源策略限制的操作</strong> <a class="header-anchor" href="#_3-受同源策略限制的操作" aria-label="Permalink to &quot;3. **受同源策略限制的操作**&quot;">​</a></h4><ul><li><strong>数据访问</strong>： <ul><li>无法通过 <code>XMLHttpRequest</code> 或 <code>fetch</code> 跨域请求</li><li>无法读取跨域 <code>iframe</code> 的 <code>DOM（如</code> <code>document.getElementById</code>）</li></ul></li><li><strong>存储隔离</strong>： <ul><li>跨域网站无法读取其他源的 <code>Cookie</code>、<code>LocalStorage</code></li></ul></li><li><strong>脚本限制</strong>： <ul><li>跨域脚本加载（如 <code>&lt;script&gt;</code> 标签）允许，但无法直接访问其内容</li></ul></li></ul><h3 id="二、本地开发时不存在跨域问题的原因" tabindex="-1">二、本地开发时不存在跨域问题的原因 <a class="header-anchor" href="#二、本地开发时不存在跨域问题的原因" aria-label="Permalink to &quot;二、本地开发时不存在跨域问题的原因&quot;">​</a></h3><h4 id="_1-开发服务器代理-主流方案" tabindex="-1">1. <strong>开发服务器代理（主流方案）</strong> <a class="header-anchor" href="#_1-开发服务器代理-主流方案" aria-label="Permalink to &quot;1. **开发服务器代理（主流方案）**&quot;">​</a></h4><ul><li><p><strong>实现方式</strong>：通过 <code>webpack-dev-server</code>、<code>Vite</code> 等工具的代理配置，将 <code>API</code> 请求转发到后端服务器。</p></li><li><p><strong>技术原理</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://backend-server:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际后端地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改请求头 Origin 为目标地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>效果</strong>：浏览器认为请求发往 <code>localhost:5173/api</code> → 实际被代理到 <code>backend-server:3000</code>，实现同源。</p></li></ul><h4 id="_2-后端启用-cors-开发环境专用" tabindex="-1">2. <strong>后端启用 CORS（开发环境专用）</strong> <a class="header-anchor" href="#_2-后端启用-cors-开发环境专用" aria-label="Permalink to &quot;2. **后端启用 CORS（开发环境专用）**&quot;">​</a></h4><ul><li><strong>实现方式</strong>：后端服务器设置响应头 <code>Access-Control-Allow-Origin: *</code>。</li><li><strong>示例代码</strong>（Node.js Express）：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许所有源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><h4 id="_3-浏览器安全策略绕过-不推荐" tabindex="-1">3. <strong>浏览器安全策略绕过（不推荐）</strong> <a class="header-anchor" href="#_3-浏览器安全策略绕过-不推荐" aria-label="Permalink to &quot;3. **浏览器安全策略绕过（不推荐）**&quot;">​</a></h4><ul><li><strong>禁用安全策略</strong>：启动 <code>Chrome</code> 时添加参数 <code>--disable-web-security</code>。</li><li><strong>风险</strong>：仅限本地测试，会完全暴露跨站攻击风险。</li></ul><h3 id="三、生产环境跨域解决方案" tabindex="-1">三、生产环境跨域解决方案 <a class="header-anchor" href="#三、生产环境跨域解决方案" aria-label="Permalink to &quot;三、生产环境跨域解决方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>方案</strong></th><th><strong>适用场景</strong></th><th><strong>实现方式</strong></th></tr></thead><tbody><tr><td><strong>CORS</strong></td><td>可控的跨域 <code>API</code> 访问</td><td>后端设置 <code>Access-Control-Allow-Origin</code> 等响应头</td></tr><tr><td><strong>反向代理</strong></td><td>隐藏后端地址，统一入口</td><td><code>Nginx/Apache</code> 配置代理规则，将 <code>/api</code> 转发到实际服务</td></tr><tr><td><strong>JSONP</strong></td><td>老旧浏览器兼容</td><td>通过 <code>&lt;script&gt;</code> 标签加载跨域数据（仅限 <code>GET</code> 请求）</td></tr><tr><td><strong>WebSocket</strong></td><td>实时双向通信</td><td>协议本身不受同源策略限制（但服务器需支持 WS）</td></tr></tbody></table><h3 id="四、关键差异对比-开发-vs-生产" tabindex="-1">四、关键差异对比：开发 vs 生产 <a class="header-anchor" href="#四、关键差异对比-开发-vs-生产" aria-label="Permalink to &quot;四、关键差异对比：开发 vs 生产&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>开发环境</strong></th><th><strong>生产环境</strong></th></tr></thead><tbody><tr><td><strong>跨域解决方案</strong></td><td>代理服务器或宽松 <code>CORS</code></td><td>严格 <code>CORS</code> 配置或反向代理</td></tr><tr><td><strong>安全性要求</strong></td><td>低（本地信任环境）</td><td>高（需防御恶意攻击）</td></tr><tr><td><strong>典型配置</strong></td><td><code>Webpack Dev Server Proxy</code></td><td><code>Nginx</code> 反向代理 + 精细 <code>CORS</code></td></tr></tbody></table><h3 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h3><ul><li><strong>浏览器跨域限制</strong>是保护用户数据安全的核心机制，通过同源策略实现。</li><li><strong>本地开发无跨域问题</strong>是通过代理工具或后端 <code>CORS</code> 配置实现的 <strong>技术性绕过</strong>，并非浏览器解除限制。</li><li><strong>生产环境必须严格处理跨域</strong>，避免使用 <code>*</code> 通配符，应指定可信域名并配合反向代理提升安全性。</li></ul><h2 id="_301、302、304、401、404-状态码" tabindex="-1"><strong>301、302、304、401</strong>、<strong>404</strong> 状态码 <a class="header-anchor" href="#_301、302、304、401、404-状态码" aria-label="Permalink to &quot;**301、302、304、401**、**404** 状态码&quot;">​</a></h2><h3 id="一、3xx-状态码-重定向类" tabindex="-1"><strong>一、3xx 状态码（重定向类）</strong> <a class="header-anchor" href="#一、3xx-状态码-重定向类" aria-label="Permalink to &quot;**一、3xx 状态码（重定向类）**&quot;">​</a></h3><h4 id="_1-301-moved-permanently-永久重定向" tabindex="-1"><strong>1. 301 Moved Permanently（永久重定向）</strong> <a class="header-anchor" href="#_1-301-moved-permanently-永久重定向" aria-label="Permalink to &quot;**1. 301 Moved Permanently（永久重定向）**&quot;">​</a></h4><ul><li><strong>用途</strong>： 表示请求的资源已<strong>永久移动</strong>到新的 <code>URL</code>。客户端（如浏览器）应更新书签或链接，后续请求直接访问新地址。</li><li><strong>特点</strong>： <ul><li>搜索引擎会将权重转移到新 <code>URL</code>。</li><li>浏览器缓存此重定向，减少后续请求。</li></ul></li><li><strong>示例场景</strong>：<br> 网站更换域名（如 <code>http://old.com</code> → <code>https://new.com</code>）。</li></ul><h4 id="_2-302-found-临时重定向" tabindex="-1"><strong>2. 302 Found（临时重定向）</strong> <a class="header-anchor" href="#_2-302-found-临时重定向" aria-label="Permalink to &quot;**2. 302 Found（临时重定向）**&quot;">​</a></h4><ul><li><strong>用途</strong>：<br> 表示资源<strong>临时移动</strong>到另一个 <code>URL</code>，客户端应继续使用原 <code>URL</code> 发起请求。</li><li><strong>特点</strong>： <ul><li>搜索引擎不会更新索引，仍保留原 <code>URL</code> 的权重。</li><li>浏览器每次请求需先访问原地址，再跳转。</li></ul></li><li><strong>示例场景</strong>：<br> 网站临时维护时跳转到备用页面。</li></ul><h4 id="_3-304-not-modified-未修改" tabindex="-1"><strong>3. 304 Not Modified（未修改）</strong> <a class="header-anchor" href="#_3-304-not-modified-未修改" aria-label="Permalink to &quot;**3. 304 Not Modified（未修改）**&quot;">​</a></h4><ul><li><strong>用途</strong>：<br> 客户端发送<strong>条件请求</strong>（如 <code>If-Modified-Since</code> 或 <code>If-None-Match</code>）时，若资源未更新，服务器返回此状态码，告知客户端可复用本地缓存。</li><li><strong>特点</strong>： <ul><li>减少重复传输，节省带宽。</li><li>需配合缓存策略（如 <code>ETag</code>、<code>Last-Modified</code>）使用。</li></ul></li><li><strong>示例场景</strong>：<br> 浏览器重复请求静态资源（如图片、<code>CSS</code> 文件），服务器确认未修改后返回 <code>304</code>。</li></ul><h3 id="二、4xx-状态码-客户端错误类" tabindex="-1"><strong>二、4xx 状态码（客户端错误类）</strong> <a class="header-anchor" href="#二、4xx-状态码-客户端错误类" aria-label="Permalink to &quot;**二、4xx 状态码（客户端错误类）**&quot;">​</a></h3><h4 id="_1-401-unauthorized-未授权" tabindex="-1"><strong>1. 401 Unauthorized（未授权）</strong> <a class="header-anchor" href="#_1-401-unauthorized-未授权" aria-label="Permalink to &quot;**1. 401 Unauthorized（未授权）**&quot;">​</a></h4><ul><li><strong>用途</strong>：<br> 请求需要用户认证，但未提供有效凭据（如用户名、密码、Token）。</li><li><strong>响应头</strong>：<br> 通常包含 <code>WWW-Authenticate</code>，指明认证方式（如 <code>Basic</code>、<code>Bearer</code>）。</li><li><strong>示例场景</strong>： <ul><li>访问需要登录的 <code>API</code> 端点但未携带 <code>Token</code>。</li><li>输入错误的用户名或密码。</li></ul></li></ul><h4 id="_2-404-not-found-未找到" tabindex="-1"><strong>2. 404 Not Found（未找到）</strong> <a class="header-anchor" href="#_2-404-not-found-未找到" aria-label="Permalink to &quot;**2. 404 Not Found（未找到）**&quot;">​</a></h4><ul><li><strong>用途</strong>： 服务器找不到请求的资源，且无进一步说明。</li><li><strong>常见原因</strong>： <ul><li>URL 拼写错误。</li><li>资源被删除或移动（未设置重定向）。</li><li>服务器路由配置错误。</li></ul></li><li><strong>示例场景</strong>： 访问不存在的页面（如 <code>https://example.com/non-existent-page</code>）。</li></ul><h3 id="三、对比表格" tabindex="-1"><strong>三、对比表格</strong> <a class="header-anchor" href="#三、对比表格" aria-label="Permalink to &quot;**三、对比表格**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>状态码</th><th>类别</th><th>含义</th><th>典型场景</th><th>客户端行为</th></tr></thead><tbody><tr><td>301</td><td>重定向</td><td>永久移动</td><td>域名更换、<code>URL</code> 重构</td><td>更新书签，缓存新地址</td></tr><tr><td>302</td><td>重定向</td><td>临时移动</td><td><code>A/B</code> 测试、临时维护</td><td>保持原 <code>URL</code>，每次重定向</td></tr><tr><td>304</td><td>缓存</td><td>资源未修改</td><td>重复请求静态资源</td><td>使用本地缓存</td></tr><tr><td>401</td><td>客户端错误</td><td>未提供有效认证</td><td>访问需登录的页面或 <code>API</code></td><td>弹出认证对话框或重定向</td></tr><tr><td>404</td><td>客户端错误</td><td>资源不存在</td><td><code>URL</code> 错误、资源被删除</td><td>显示错误页面，终止请求</td></tr></tbody></table><h3 id="四、注意事项" tabindex="-1"><strong>四、注意事项</strong> <a class="header-anchor" href="#四、注意事项" aria-label="Permalink to &quot;**四、注意事项**&quot;">​</a></h3><ol><li><p><strong>301 vs 302</strong>：</p><ul><li>永久性重定向优先用 <strong>301</strong>（SEO 友好），临时性用 <strong>302</strong>。</li><li>错误使用可能导致搜索引擎索引混乱。</li></ul></li><li><p><strong>304 与缓存策略</strong>：</p><ul><li>需合理设置 <code>Cache-Control</code>、<code>ETag</code> 等响应头。</li><li>避免缓存动态内容（如用户个性化数据）。</li></ul></li><li><p><strong>401 vs 403</strong>：</p><ul><li><strong>401</strong> 表示需要认证，<strong>403 Forbidden</strong> 表示认证成功但无权访问。</li><li>例如：普通用户尝试访问管理员页面 → 返回 <code>403</code>。</li></ul></li><li><p><strong>404 优化</strong>：</p><ul><li>自定义友好错误页面（如显示搜索框或导航）。</li><li>监控 <code>404</code> 日志，修复死链或设置重定向（如 <code>301</code> 到新页面）。</li></ul></li></ol><h3 id="五、总结-1" tabindex="-1"><strong>五、总结</strong> <a class="header-anchor" href="#五、总结-1" aria-label="Permalink to &quot;**五、总结**&quot;">​</a></h3><ul><li><strong>3xx</strong>：控制重定向和缓存，优化用户体验和性能。</li><li><strong>4xx</strong>：反映客户端错误，需检查请求合法性或认证状态。</li><li>合理使用状态码能提升网站可维护性、<code>SEO</code> 效果和安全性。</li></ul>`,60))])}const F=a(h,[["render",p]]);export{b as __pageData,F as default};
