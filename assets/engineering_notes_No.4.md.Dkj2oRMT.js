import{_ as i,c as a,o as n,ac as e}from"./chunks/framework.CphcMI6B.js";const c=JSON.parse('{"title":"Note 4","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/notes/No.4.md","filePath":"engineering/notes/No.4.md","lastUpdated":1749615877000}'),l={name:"engineering/notes/No.4.md"};function t(o,s,h,r,d,p){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="note-4" tabindex="-1">Note 4 <a class="header-anchor" href="#note-4" aria-label="Permalink to &quot;Note 4&quot;">​</a></h1><h2 id="babel-工作流程简介" tabindex="-1"><code>Babel</code> 工作流程简介 <a class="header-anchor" href="#babel-工作流程简介" aria-label="Permalink to &quot;\`Babel\` 工作流程简介&quot;">​</a></h2><p><code>Babel</code> 是一个广泛使用的 <code>JavaScript</code> 编译器，它通过以下核心步骤将新的 <code>ES6+</code> 语法转换为向后兼容的 <code>JavaScript</code> 代码</p><h3 id="_1-解析-parsing" tabindex="-1">1. <strong>解析（Parsing）</strong> <a class="header-anchor" href="#_1-解析-parsing" aria-label="Permalink to &quot;1. **解析（Parsing）**&quot;">​</a></h3><br><p>将源代码转换为<strong>抽象语法树（AST）</strong>，以便程序化分析代码结构。</p><ul><li><strong>工具</strong>：<code>@babel/parser</code>（基于 <code>Acorn</code>）</li><li><strong>过程</strong>： <ul><li><strong>词法分析</strong>：将代码拆解为令牌（<code>Tokens</code>），如标识符、运算符等。</li><li><strong>语法分析</strong>：根据语法规则将令牌转换为 <code>AST</code>，表示代码的层级结构。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：ES6 箭头函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被解析为 AST（简化表示）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  declarations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclarator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    init: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ArrowFunctionExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      params: [{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      body: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BinaryExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-转换-transforming" tabindex="-1">2. <strong>转换（Transforming）</strong> <a class="header-anchor" href="#_2-转换-transforming" aria-label="Permalink to &quot;2. **转换（Transforming）**&quot;">​</a></h3><br><p>通过遍历和修改 <code>AST</code>，将新语法转换为旧语法。</p><ul><li><strong>工具</strong>：<code>@babel/traverse</code> + 插件系统（如 <code>@babel/plugin-transform-arrow-functions</code>）</li><li><strong>关键机制</strong>： <ul><li><strong>插件</strong>：每个插件处理一种或一类语法特性（如箭头函数、类、解构等）。</li><li><strong>预设（Preset）</strong>：如 <code>@babel/preset-env</code>，自动根据目标环境选择需要的插件。</li></ul></li></ul><p><strong>示例转换（箭头函数 → 普通函数）</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换前（ES6）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换后（ES5）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b }</span></span></code></pre></div><h3 id="_3-生成-code-generation" tabindex="-1">3. <strong>生成（Code Generation）</strong> <a class="header-anchor" href="#_3-生成-code-generation" aria-label="Permalink to &quot;3. **生成（Code Generation）**&quot;">​</a></h3><br><p>将修改后的 <code>AST</code> 重新生成为目标代码。</p><ul><li><strong>工具</strong>：<code>@babel/generator</code></li><li><strong>过程</strong>：深度优先遍历 <code>AST</code>，将每个节点转换为对应的代码字符串。</li></ul><h3 id="核心细节" tabindex="-1">核心细节 <a class="header-anchor" href="#核心细节" aria-label="Permalink to &quot;核心细节&quot;">​</a></h3><h4 id="a-语法转换-syntax-transformations" tabindex="-1">a. <strong>语法转换（Syntax Transformations）</strong> <a class="header-anchor" href="#a-语法转换-syntax-transformations" aria-label="Permalink to &quot;a. **语法转换（Syntax Transformations）**&quot;">​</a></h4><ul><li><strong>示例转换场景</strong>： <ul><li><strong>类（Classes）</strong> → 转换为构造函数和原型方法。</li><li><strong>模板字符串</strong> → 转换为字符串拼接（<code>&#39;Hello &#39; + name</code>）。</li><li><strong>解构赋值</strong> → 转换为逐个属性赋值。</li><li><strong>异步函数（async/await）</strong> → 转换为生成器函数或 <code>Promise</code> 链。</li></ul></li></ul><h4 id="b-polyfill-api-兼容" tabindex="-1">b. <strong>Polyfill（API 兼容）</strong> <a class="header-anchor" href="#b-polyfill-api-兼容" aria-label="Permalink to &quot;b. **Polyfill（API 兼容）**&quot;">​</a></h4><ul><li><strong>问题</strong>：<code>Babel</code> 默认不处理新的 <code>API</code>（如 <code>Promise</code>、<code>Array.from</code>）。</li><li><strong>解决方案</strong>： <ul><li><strong><code>@babel/polyfill</code></strong>（已弃用）：通过全局污染注入 <code>polyfill</code>。</li><li><strong><code>core-js</code> + <code>regenerator-runtime</code></strong>（推荐）：按需引入 <code>polyfill</code>。</li><li><strong><code>useBuiltIns: &#39;usage&#39;</code></strong>（在 <code>@babel/preset-env</code> 中配置）：自动按需引入。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置示例（.babelrc）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;useBuiltIns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;usage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;corejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="c-目标环境适配" tabindex="-1">c. <strong>目标环境适配</strong> <a class="header-anchor" href="#c-目标环境适配" aria-label="Permalink to &quot;c. **目标环境适配**&quot;">​</a></h4><ul><li><strong>配置</strong>：通过 <code>.browserslistrc</code> 或 <code>package.json</code> 定义目标浏览器/Node.js 版本。</li><li><strong>优化</strong>：<code>Babel</code> 仅转换目标环境不支持的语法，减少冗余代码。</li></ul><h3 id="完整流程示例" tabindex="-1">完整流程示例 <a class="header-anchor" href="#完整流程示例" aria-label="Permalink to &quot;完整流程示例&quot;">​</a></h3><p><strong>输入（ES6+）</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello, \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>转换步骤</strong>：</p><ol><li><strong>解析</strong>为 <code>AST</code>。</li><li><strong>转换</strong>： <ul><li>将 <code>class</code> 转换为构造函数和原型方法。</li><li>将模板字符串转换为字符串拼接。</li></ul></li><li><strong>生成</strong>输出（ES5）：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="工具链总结" tabindex="-1">工具链总结 <a class="header-anchor" href="#工具链总结" aria-label="Permalink to &quot;工具链总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th>工具</th><th>作用</th></tr></thead><tbody><tr><td><code>@babel/parser</code></td><td>解析代码生成 <code>AST</code></td></tr><tr><td><code>@babel/traverse</code></td><td>遍历并修改 <code>AST</code></td></tr><tr><td><code>@babel/generator</code></td><td>将 <code>AST</code> 转换回代码</td></tr><tr><td><code>@babel/preset-env</code></td><td>智能选择插件适配目标环境</td></tr><tr><td><code>core-js</code></td><td>提供新的 <code>API</code> 的 <code>Polyfill</code></td></tr></tbody></table><p>通过这一流程，<code>Babel</code> 确保了 <code>JavaScript</code> 代码的跨版本兼容性。</p><h2 id="微服务" tabindex="-1">微服务 <a class="header-anchor" href="#微服务" aria-label="Permalink to &quot;微服务&quot;">​</a></h2><p>微服务是一种软件架构风格，通过<strong>将应用程序拆分为多个小型、独立的服务来构建复杂系统</strong>。<strong>每个服务专注于单一业务功能，独立开发、部署和扩展，并通过轻量级通信机制交互</strong>。这种架构有助于提升系统的可维护性、扩展性和灵活性。</p><h3 id="_1-核心概念" tabindex="-1"><strong>1. 核心概念</strong> <a class="header-anchor" href="#_1-核心概念" aria-label="Permalink to &quot;**1. 核心概念**&quot;">​</a></h3><ul><li><strong>服务拆分</strong>：按业务功能划分服务（如用户管理、订单处理），每个服务职责单一。</li><li><strong>独立部署</strong>：服务可独立部署，无需整体重新发布，提升迭代速度。</li><li><strong>去中心化</strong>： <ul><li><strong>技术多样性</strong>：不同服务可采用适合的技术栈（语言、数据库）。</li><li><strong>数据自治</strong>：每个服务拥有私有数据库，通过 <code>API</code> 共享数据，避免直接访问。</li></ul></li></ul><h3 id="_2-核心优势" tabindex="-1"><strong>2. 核心优势</strong> <a class="header-anchor" href="#_2-核心优势" aria-label="Permalink to &quot;**2. 核心优势**&quot;">​</a></h3><ul><li><strong>弹性与容错</strong>：单点故障不影响整体系统，结合断路器（如<code>Hystrix</code>）提升可靠性。</li><li><strong>可扩展性</strong>：按需扩展特定服务（如促销期间扩容订单服务）。</li><li><strong>敏捷开发</strong>：小团队专注独立服务，并行开发，加快交付速度。</li><li><strong>技术灵活</strong>：新旧技术共存，逐步替换遗留系统。</li></ul><h3 id="_3-关键技术组件" tabindex="-1"><strong>3. 关键技术组件</strong> <a class="header-anchor" href="#_3-关键技术组件" aria-label="Permalink to &quot;**3. 关键技术组件**&quot;">​</a></h3><ul><li><strong>通信机制</strong>： <ul><li><strong>同步</strong>：<code>RESTful API</code>、<code>gRPC</code>。</li><li><strong>异步</strong>：消息队列（<code>Kafka</code>、<code>RabbitMQ</code>）实现事件驱动架构。</li></ul></li><li><strong>服务发现与负载均衡</strong>： <ul><li>工具：<code>Consul</code>、<code>Eureka</code>、<code>Kubernetes Service</code>。</li><li>负载均衡器：<code>Nginx</code>、云服务（<code>AWS ALB</code>）。</li></ul></li><li><strong>API 网关</strong>： <ul><li>功能：路由、认证（<code>JWT/OAuth2</code>）、限流、日志聚合。</li><li>工具：<code>Spring Cloud Gateway</code>、<code>Kong</code>。</li></ul></li><li><strong>配置管理</strong>： <ul><li>集中化配置：<code>Spring Cloud Config</code>、<code>Consul KV</code>。</li></ul></li><li><strong>监控与日志</strong>： <ul><li>指标收集：<code>Prometheus</code> + <code>Grafana</code>。</li><li>日志聚合：<code>ELK Stack</code>（<code>Elasticsearch</code>, <code>Logstash</code>, <code>Kibana</code>）。</li><li>分布式追踪：<code>Zipkin</code>、<code>Jaeger</code>。</li></ul></li></ul><h3 id="_4-挑战与解决方案" tabindex="-1"><strong>4. 挑战与解决方案</strong> <a class="header-anchor" href="#_4-挑战与解决方案" aria-label="Permalink to &quot;**4. 挑战与解决方案**&quot;">​</a></h3><ul><li><strong>分布式复杂性</strong>： <ul><li><strong>事务管理</strong>：<code>Saga</code>模式替代传统<code>ACID</code>事务，保证最终一致性。</li><li><strong>网络延迟</strong>：优化通信协议（如<code>gRPC</code>）、缓存策略。</li></ul></li><li><strong>运维复杂度</strong>： <ul><li><strong>容器化</strong>：<code>Docker</code>封装服务，<code>Kubernetes</code>管理编排。</li><li><strong>CI/CD</strong>：自动化流水线（<code>Jenkins</code>、<code>GitLab CI</code>）实现独立部署。</li></ul></li><li><strong>安全</strong>： <ul><li>服务间认证：<code>mTLS</code>（双向<code>TLS</code>）。</li><li>集中鉴权：<code>OAuth2</code> + <code>API</code>网关。</li></ul></li></ul><h3 id="_5-设计原则" tabindex="-1"><strong>5. 设计原则</strong> <a class="header-anchor" href="#_5-设计原则" aria-label="Permalink to &quot;**5. 设计原则**&quot;">​</a></h3><ul><li><strong>单一职责原则（SRP）</strong>：每个服务仅聚焦一个业务领域。</li><li><strong>高内聚低耦合</strong>：通过定义良好的接口交互，隐藏内部实现。</li><li><strong>自动化运维</strong>：基础设施即代码（<code>IaC</code>），自动化测试、部署。</li><li><strong>容错设计</strong>：重试机制、熔断、降级策略（如<code>Sentinel</code>）。</li></ul><h3 id="_6-适用场景" tabindex="-1"><strong>6. 适用场景</strong> <a class="header-anchor" href="#_6-适用场景" aria-label="Permalink to &quot;**6. 适用场景**&quot;">​</a></h3><ul><li><strong>大型复杂系统</strong>：团队规模大，需独立迭代模块。</li><li><strong>高并发需求</strong>：灵活扩展特定组件应对流量高峰。</li><li><strong>混合技术栈</strong>：逐步引入新技术，避免全盘重构。</li></ul><h3 id="_7-常见工具与框架" tabindex="-1"><strong>7. 常见工具与框架</strong> <a class="header-anchor" href="#_7-常见工具与框架" aria-label="Permalink to &quot;**7. 常见工具与框架**&quot;">​</a></h3><ul><li><strong>开发框架</strong>： <ul><li>Java：<code>Spring Boot</code> + <code>Spring Cloud</code>。</li><li>Go：<code>Go Micro</code>、<code>Gin</code>。</li><li>Node.js：<code>NestJS</code>、<code>Express</code>。</li></ul></li><li><strong>服务网格</strong>：<code>Istio</code>（流量管理、安全、可观测性）。</li><li><strong>容器编排</strong>：<code>Kubernetes</code>、<code>Docker Swarm</code>。</li></ul><h3 id="_8-微服务-vs-单体架构" tabindex="-1"><strong>8. 微服务 vs 单体架构</strong> <a class="header-anchor" href="#_8-微服务-vs-单体架构" aria-label="Permalink to &quot;**8. 微服务 vs 单体架构**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>微服务</strong></th><th><strong>单体架构</strong></th></tr></thead><tbody><tr><td><strong>开发速度</strong></td><td>独立团队并行开发</td><td>代码耦合，协作复杂</td></tr><tr><td><strong>可扩展性</strong></td><td>按需扩展服务实例</td><td>整体扩展，资源浪费</td></tr><tr><td><strong>技术选型</strong></td><td>多语言、多数据库</td><td>统一技术栈</td></tr><tr><td><strong>部署风险</strong></td><td>独立部署，影响小</td><td>全量部署，风险高</td></tr><tr><td><strong>运维难度</strong></td><td>需完善监控、自动化工具</td><td>简单，但规模大后难维护</td></tr></tbody></table><h3 id="_9-演进路径" tabindex="-1"><strong>9. 演进路径</strong> <a class="header-anchor" href="#_9-演进路径" aria-label="Permalink to &quot;**9. 演进路径**&quot;">​</a></h3><ul><li><strong>单体优先</strong>：初期快速验证，后期逐步拆分。</li><li><strong>领域驱动设计（DDD）</strong>：通过限界上下文（Bounded Context）识别服务边界。</li><li><strong>Strangler Pattern</strong>：逐步替换旧系统，而非一次性重构。</li></ul><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><br><p>微服务通过解耦和自治提升系统灵活性与可维护性，但需应对分布式系统的复杂性。成功实施依赖强大的基础设施（如Kubernetes）、成熟的DevOps实践及团队协作模式。适用于中大型项目，小型项目需权衡复杂度与收益。</p><h2 id="垃圾回收-garbage-collection与内存泄漏" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Memory_management#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6" target="_blank" rel="noreferrer">垃圾回收 Garbage Collection</a>与内存泄漏 <a class="header-anchor" href="#垃圾回收-garbage-collection与内存泄漏" aria-label="Permalink to &quot;[垃圾回收 Garbage Collection](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Memory_management#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6)与内存泄漏&quot;">​</a></h2><h3 id="一、javascript-的垃圾回收-gc" tabindex="-1">一、<code>JavaScript</code> 的垃圾回收（GC） <a class="header-anchor" href="#一、javascript-的垃圾回收-gc" aria-label="Permalink to &quot;一、\`JavaScript\` 的垃圾回收（GC）&quot;">​</a></h3><br><p><code>JavaScript</code> 是一种<strong>自动内存管理</strong>的语言。开发者通常不需要手动分配和释放内存。引擎会自动跟踪内存的分配和使用，并在确定某个对象不再被需要（即“垃圾”）时，自动释放其占用的内存。这个过程就是<strong>垃圾回收</strong>。</p><h3 id="核心垃圾回收算法" tabindex="-1">核心垃圾回收算法 <a class="header-anchor" href="#核心垃圾回收算法" aria-label="Permalink to &quot;核心垃圾回收算法&quot;">​</a></h3><br><p>现代 <code>JavaScript</code> 引擎（如 <code>V8</code>, <code>SpiderMonkey</code>, <code>JavaScriptCore</code>）主要使用以下策略的组合：</p><ol><li><strong>标记清除（Mark-and-Sweep）</strong> - <strong>主流算法</strong></li></ol><ul><li><strong>标记阶段：</strong> <code>GC</code> 从一组称为 <strong>&quot;根&quot;（Roots）</strong> 的对象开始（通常是全局对象、当前执行栈上的变量和函数作用域中的变量）。它会遍历所有能从“根”访问到的对象，并将它们标记为“可达”（Alive）。</li><li><strong>清除阶段：</strong> <code>GC</code> 遍历整个堆内存。所有没有被标记为“可达”的对象被认为是“不可达”的垃圾。<code>GC</code> 会回收这些对象占用的内存空间。</li><li><strong>优点：</strong> 能很好地处理循环引用（两个或多个对象相互引用，但整体上已不可达）。</li></ul><ol start="2"><li><strong>引用计数（Reference Counting）</strong> - <strong>基本淘汰</strong></li></ol><ul><li><p>每个对象维护一个引用计数器，记录有多少个其他对象或变量引用着它。</p></li><li><p>当引用计数变为 <code>0</code> 时，对象会被立即回收。</p></li><li><p><strong>致命缺点：</strong> 无法处理循环引用（<code>A</code> 引用 <code>B</code>，<code>B</code> 引用 <code>A</code>，即使它们都已不被外界引用，计数也永远不会为 <code>0</code>，导致内存泄露）。现代引擎已不再将其作为主要算法。</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>现代 JavaScript 引擎不再使用引用计数进行垃圾回收。</p></div></li></ul><ol start="3"><li><strong>分代收集（Generational Collection）</strong></li></ol><ul><li><strong>核心观察：</strong> 绝大多数对象的生命周期都非常短（“朝生夕死”）；存活时间长的对象往往存活时间非常长。</li><li><strong>策略：</strong> 将堆内存划分为不同的“代”（通常是两代）： <ul><li><strong>新生代（Young Generation）：</strong> 存放新创建的对象。<code>GC</code> 发生非常频繁（<strong>副垃圾回收器</strong> - <code>Scavenger</code>），采用高效的复制算法（将存活对象复制到另一区域，清空原区域）。</li><li><strong>老生代（Old Generation）：</strong> 存放经历过多次新生代 <code>GC</code> 后仍然存活的对象。<code>GC</code> 发生频率较低（<strong>主垃圾回收器</strong>），通常采用标记清除或标记整理（<code>Mark-Compact</code>，清除后移动存活对象减少内存碎片）算法。</li></ul></li><li><strong>优点：</strong> 大幅提高 <code>GC</code> 效率，减少停顿时间。</li></ul><ol start="4"><li><strong>增量标记（Incremental Marking）</strong></li></ol><ul><li>将耗时的标记阶段拆分成多个小步骤，穿插在 <code>JavaScript</code> 执行过程中进行。</li><li><strong>优点：</strong> 避免单次长时间 <code>GC</code> 停顿导致应用卡顿（<code>UI</code> 冻结、请求延迟）。</li></ul><ol start="5"><li><strong>空闲时间收集（Idle-Time Collection）</strong></li></ol><ul><li>引擎尝试在浏览器或 <code>Node.js</code> 空闲时执行部分 <code>GC</code> 任务。</li><li><strong>优点：</strong> 进一步减少对主线程的影响。</li></ul><h4 id="gc-的触发时机" tabindex="-1"><code>GC</code> 的触发时机 <a class="header-anchor" href="#gc-的触发时机" aria-label="Permalink to &quot;\`GC\` 的触发时机&quot;">​</a></h4><ul><li>分配新对象时，如果新生代空间不足，触发新生代 <code>GC</code>。- 老生代空间达到某个阈值时，触发老生代 <code>GC</code>。- 脚本主动调用 <code>global.gc()</code>（非标准，主要用于调试，如 <code>Node.js</code> 的 <code>--expose-gc</code>）。- 浏览器/Node.js 在空闲时。</li></ul><h3 id="二、javascript-中的内存泄露-memory-leak" tabindex="-1">二、JavaScript 中的内存泄露（Memory Leak） <a class="header-anchor" href="#二、javascript-中的内存泄露-memory-leak" aria-label="Permalink to &quot;二、JavaScript 中的内存泄露（Memory Leak）&quot;">​</a></h3><br><p>内存泄露是指：程序中<strong>已经分配的内存</strong>，由于<strong>某些原因不再需要</strong>，却<strong>没有被垃圾回收机制正确释放</strong>，导致内存占用持续增长，最终可能耗尽可用内存，引起程序性能下降（卡顿）、崩溃或浏览器标签页崩溃。</p><h4 id="常见的内存泄露模式" tabindex="-1">常见的内存泄露模式 <a class="header-anchor" href="#常见的内存泄露模式" aria-label="Permalink to &quot;常见的内存泄露模式&quot;">​</a></h4><ol><li><strong>意外的全局变量：</strong></li></ol><ul><li>在函数内部忘记使用 <code>var</code>, <code>let</code>, <code>const</code> 声明变量，导致变量被挂载到全局对象（浏览器中是 <code>window</code>）。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> leakyFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  oopsGlobal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;I am a global variable!&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 没有声明！成了 window.oopsGlobal</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.anotherGlobal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Oops!&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在非严格模式下，this 指向 window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">leakyFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使 leakyFunction 执行完毕，oopsGlobal 和 anotherGlobal 依然存在</span></span></code></pre></div><ul><li><strong>修复：</strong> 始终使用 <code>var</code>, <code>let</code>, <code>const</code> 声明变量；使用严格模式 (<code>&#39;use strict&#39;</code>)，在函数内未声明的赋值会报错。</li></ul><ol start="2"><li><strong>被遗忘的定时器（Timers）和回调（Callbacks）：</strong></li></ol><ul><li><code>setInterval</code> 会持续执行，直到被 <code>clearInterval</code> 清除。如果定时器引用了不再需要的 <code>DOM</code> 元素或大对象，这些对象就不会被释放。</li><li>事件监听器 (<code>addEventListener</code>) 在 <code>DOM</code> 元素被移除后，如果监听器没有被移除 (<code>removeEventListener</code>)，并且监听器函数引用了该元素或其他大对象，也会造成泄露（尤其是 <code>SPA</code> 中路由切换时）。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定时器泄露</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadHugeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 即使 node 被从 DOM 移除，定时器还在，bigData 和 node 引用还在</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    node.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 事件监听器泄露 (SPA 常见)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onButtonClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myButton&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onButtonClick)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果 myButton 被移除出 DOM，并且没有移除事件监听器，onButtonClick 及其作用域链上的变量不会被释放</span></span></code></pre></div><ul><li><strong>修复：</strong> 在不需要定时器时调用 <code>clearInterval</code> / <code>clearTimeout</code>；在 <code>DOM</code> 元素被移除前（或在组件卸载生命周期钩子中 - <code>React</code>: <code>useEffect</code> <code>cleanup</code>, <code>Vue</code>: <code>beforeUnmount</code>）移除事件监听器。使用 <code>AbortController</code> 管理事件监听器移除。</li></ul><ol start="3"><li><strong>闭包（Closures）：</strong></li></ol><ul><li>闭包是函数及其创建时的词法作用域的组合。这是 <code>JavaScript</code> 的强大特性。</li><li><strong>泄露风险：</strong> 如果闭包持有对一个大对象（如 <code>DOM</code> 树、大数组）的引用，即使闭包外部代码已经不再需要这个大对象，只要闭包本身还存活（例如被事件监听器引用、存储在全局变量中），这个大对象就无法被 <code>GC</code> 回收。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hugeArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 大对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // inner 闭包引用了 hugeArray</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Closure holding a reference to hugeArray&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> leakyClosure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// leakyClosure 引用了 inner，inner 闭包引用了 hugeArray</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使 outer 执行完毕，hugeArray 因为被 leakyClosure 引用的 inner 闭包所引用，无法被回收</span></span></code></pre></div><ul><li><strong>修复：</strong> 注意闭包引用的内容。在闭包不再需要时，解除对其的引用（如将包含闭包的变量设为 <code>null</code>）。谨慎在闭包中持有大对象的引用。</li></ul><ol start="4"><li><strong>分离的 DOM 引用（Detached DOM References）：</strong></li></ol><ul><li>当 <code>DOM</code> 元素从文档树中移除（<code>removeChild</code>, <code>innerHTML = &#39;&#39;</code>），但 <code>JavaScript</code> 代码中仍然保留着对该 <code>DOM</code> 元素的引用时，就产生了“分离的 <code>DOM</code> 树”。</li><li>这些分离的 <code>DOM</code> 元素及其关联的事件监听器和子元素所占用的内存不会被 <code>GC</code> 回收，因为 <code>JavaScript</code> 代码仍然持有它们的引用。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在表格中缓存单元格引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  row: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;row&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cell: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cell-in-row&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 稍后移除整个表格行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;row&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此时 row 和 cell 已经从 DOM 树移除，但 cache 对象仍然引用着它们！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 它们变成了分离的 DOM 节点，内存泄露。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>修复：</strong> 在移除 <code>DOM</code> 元素后，将其对应的 <code>JavaScript</code> 变量引用设置为 <code>null</code> (<code>cache.row = null; cache.cell = null</code>)。避免在全局对象或长生命周期的对象中存储大量 <code>DOM</code> 引用。使用 <code>WeakMap</code> 或 <code>WeakSet</code> 来关联 <code>DOM</code> 元素和附加数据（它们对键的引用是弱引用，不影响 <code>GC</code>）。</li></ul><ol start="5"><li><strong>未清理的 Map/Set 引用：</strong></li></ol><ul><li><p>使用 <code>Map</code> 或 <code>Set</code> 存储对象时，如果这些对象本身不再需要，但忘记从 <code>Map</code> 或 <code>Set</code> 中删除它们，这些对象就不会被 <code>GC</code> 回收，因为 <code>Map</code>/<code>Set</code> 持有对它们的强引用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objectsMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  objectsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.id, obj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 仅仅从应用逻辑中移除，但没有从 Map 中删除</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // objectsMap.delete(id)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 缺少这行导致泄露！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>修复：</strong> 在对象不再需要时，及时从 <code>Map</code>/<code>Set</code> 中删除。如果需要弱引用特性，使用 <code>WeakMap</code> 或 <code>WeakSet</code>（键必须是对象，且不计入引用计数）。</p></li></ul><ol start="6"><li><strong>控制台日志（Console Logs）：</strong></li></ol><ul><li><p>在开发过程中，<code>console.log</code> 输出到控制台的对象不会被 <code>GC</code> 回收，因为浏览器需要保持它们在控制台中可查看（即使代码本身已不再引用它们）。</p></li><li><p><strong>影响：</strong> 主要在开发阶段可能导致内存占用偏高。生产环境的控制台日志通常会被移除或压缩，影响较小，但仍建议避免在生产中无节制地 <code>console.log</code> 大对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processBigData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hugeData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHugeData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hugeData) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在控制台关闭或清理前，hugeData 不会被释放</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 处理 hugeData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>修复：</strong> 开发时注意，尤其是循环中的 <code>console.log</code>。生产环境使用构建工具移除 <code>console.log</code> 语句。</p></li></ul><h3 id="三、如何检测和诊断内存泄露" tabindex="-1">三、如何检测和诊断内存泄露 <a class="header-anchor" href="#三、如何检测和诊断内存泄露" aria-label="Permalink to &quot;三、如何检测和诊断内存泄露&quot;">​</a></h3><ol><li><strong>浏览器开发者工具 (Chrome DevTools) - 核心工具：</strong></li></ol><ul><li><strong>Performance 面板：</strong> 录制一段时间内的内存使用情况（<code>JS Heap</code>）。观察 <code>JS Heap</code> 或 <code>Nodes</code> 等指标是否呈<strong>持续上升趋势</strong>（阶梯式增长），即使在做应该释放内存的操作（如切换路由、关闭模态框）后也不回落。</li><li><strong>Memory 面板：</strong><ul><li><strong>Heap Snapshot：</strong> 在疑似泄露点前后分别拍快照。比较快照，找出内存增长的部分，分析是哪些对象在增加，并查看它们被谁引用着（<code>Retainers</code>）。特别关注 <code>(detached tree)</code>。</li><li><strong>Allocation instrumentation on timeline：</strong> 实时记录内存分配堆栈。观察哪些函数在持续分配内存，且分配的内存没有被释放。</li><li><strong>Allocation sampling：</strong> 采样内存分配情况，开销较小，适合长时间运行。</li></ul></li></ul><ol start="2"><li><strong>Node.js 检测工具：</strong></li></ol><ul><li><code>process.memoryUsage()</code>： 在代码中定期打印 <code>heapUsed</code> 观察趋势。</li><li><code>--inspect</code> / <code>--inspect-brk</code>： 启用调试器，然后使用 <code>Chrome DevTools</code> 连接到 <code>Node.js</code> 进程进行内存分析（方法与浏览器类似）。</li><li><strong>堆内存快照：</strong> <code>v8.getHeapSnapshot()</code> 或使用 <code>heapdump</code>/<code>node-memwatch</code> 等模块生成堆快照文件，导入 <code>Chrome DevTools</code> 分析。</li><li><strong>性能分析工具：</strong> <code>--prof</code> / <code>--prof-process</code>， <code>clinic.js</code> (包含 <code>heap-profiler</code>)。</li></ul><h3 id="四、预防内存泄露的最佳实践" tabindex="-1">四、预防内存泄露的最佳实践 <a class="header-anchor" href="#四、预防内存泄露的最佳实践" aria-label="Permalink to &quot;四、预防内存泄露的最佳实践&quot;">​</a></h3><ol><li><strong>避免意外全局变量：</strong> 使用严格模式 (<code>&#39;use strict&#39;</code>)。</li><li><strong>及时清理：</strong></li></ol><ul><li>清除不再需要的定时器 (<code>clearInterval</code>, <code>clearTimeout</code>)。</li><li>移除不再需要的事件监听器 (<code>removeEventListener</code>)。在组件卸载/销毁的生命周期钩子中做清理工作。</li><li>在移除 <code>DOM</code> 元素后，将其 <code>JavaScript</code> 引用置为 <code>null</code>。</li></ul><ol start="3"><li><strong>谨慎使用闭包：</strong> 明确闭包引用了哪些变量，避免在长生命周期的闭包中持有对大对象或不再需要的 <code>DOM</code> 元素的引用。在闭包不再需要时解除引用。</li><li><strong>管理数据结构：</strong></li></ol><ul><li>及时从 <code>Map</code>、<code>Set</code>、数组、对象属性中删除不再需要的项。</li><li>考虑使用 <code>WeakMap</code> 和 <code>WeakSet</code> 来关联对象和附加数据（当键对象在其他地方没有强引用时，<code>GC</code> 可以自动清理）。</li></ul><ol start="5"><li><strong>分离 DOM 引用：</strong> 避免在全局或长生命周期对象中存储大量 <code>DOM</code> 引用。移除 <code>DOM</code> 后置空引用。用 <code>WeakMap</code> 关联 <code>DOM</code> 和元数据。</li><li><strong>减少控制台日志：</strong> 避免在生产环境遗留大量 <code>console.log</code>，尤其是对大对象。</li><li><strong>使用工具监控：</strong> 在开发和测试阶段，定期使用 <code>Chrome DevTools</code> 等工具进行内存分析，尤其是在进行可能导致泄露的操作（如路由切换、大量数据加载/卸载）之后。</li></ol><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>垃圾回收 (GC)</strong> 是 <code>JavaScript</code> 引擎自动管理内存的核心机制，主要基于<strong>标记清除</strong>和<strong>分代收集</strong>策略，旨在回收不再使用的对象所占用的内存。</li><li><strong>内存泄露</strong> 发生在应用逻辑上已不再需要的内存，由于代码缺陷（如未清除的引用：全局变量、定时器、事件监听器、闭包、分离的<code>DOM、Map/Set</code> 项）而无法被 <code>GC</code> 回收，导致内存占用持续增长。</li><li><strong>检测泄露</strong> 主要依靠 <code>Chrome DevTools</code> 的 <code>Performance</code> 和 <code>Memory</code> 面板（或 <code>Node.js</code> 的对应工具），通过观察内存趋势、对比堆快照、记录内存分配时间线来定位泄露源。</li><li><strong>预防泄露</strong> 的关键在于<strong>良好的编码习惯</strong>：避免意外全局变量、及时清理资源（定时器、事件监听器）、谨慎管理引用（闭包、<code>DOM</code> 引用、数据结构）、合理使用弱引用 (<code>WeakMap</code>, <code>WeakSet</code>)，并利用工具进行主动监控。</li></ul>`,114)])])}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
