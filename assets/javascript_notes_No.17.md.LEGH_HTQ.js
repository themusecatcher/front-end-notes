import{_ as t,C as l,c as h,o as n,j as i,G as e,ab as k,a as p}from"./chunks/framework.B6eZocN-.js";const u=JSON.parse('{"title":"Note 17","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/notes/No.17.md","filePath":"javascript/notes/No.17.md","lastUpdated":1747715696000}'),r={name:"javascript/notes/No.17.md"};function d(o,s,g,E,c,y){const a=l("BackTop");return n(),h("div",null,[s[0]||(s[0]=i("h1",{id:"note-17",tabindex:"-1"},[p("Note 17 "),i("a",{class:"header-anchor",href:"#note-17","aria-label":'Permalink to "Note 17"'},"​")],-1)),e(a),s[1]||(s[1]=k(`<h2 id="为什么-js-中-0-1-0-2-0-3" tabindex="-1">为什么 <code>js</code> 中 <code>0.1 + 0.2 !== 0.3</code>？ <a class="header-anchor" href="#为什么-js-中-0-1-0-2-0-3" aria-label="Permalink to &quot;为什么 \`js\` 中 \`0.1 + 0.2 !== 0.3\`？&quot;">​</a></h2><p>在 <code>JavaScript</code> 中，<code>0.1 + 0.2 !== 0.3</code> 的根本原因是计算机使用 <strong>二进制浮点数表示法</strong>（遵循 IEEE 754 标准）导致的精度丢失问题。以下是详细的解释：</p><h3 id="一、浮点数的二进制表示" tabindex="-1">一、浮点数的二进制表示 <a class="header-anchor" href="#一、浮点数的二进制表示" aria-label="Permalink to &quot;一、浮点数的二进制表示&quot;">​</a></h3><p>计算机用二进制存储数字，而许多十进制小数无法精确转换为二进制。例如：</p><ul><li><strong>0.1（十进制）</strong> 转换为二进制是 <code>0.00011001100110011...</code>（无限循环）。</li><li><strong>0.2（十进制）</strong> 转换为二进制是 <code>0.0011001100110011...</code>（无限循环）。</li></ul><p>这些无限循环的二进制小数在存储时会被 <strong>截断</strong> 或 <strong>舍入</strong>，导致精度丢失。</p><h3 id="二、ieee-754-双精度浮点数" tabindex="-1">二、IEEE 754 双精度浮点数 <a class="header-anchor" href="#二、ieee-754-双精度浮点数" aria-label="Permalink to &quot;二、IEEE 754 双精度浮点数&quot;">​</a></h3><p><code>JavaScript</code> 使用 <strong>64位双精度浮点数</strong>（Double-precision floating-point）存储数值，其结构为：</p><ul><li><strong>1位符号位</strong>：表示正负。</li><li><strong>11位指数位</strong>：决定数值的范围。</li><li><strong>52位尾数位</strong>：存储有效数字（二进制小数部分）。</li></ul><p>由于尾数位有限（52位），当十进制小数转换为二进制后长度超过 <code>52</code> 位时，会 <strong>舍入到最近的近似值</strong>，从而引发精度误差。</p><h3 id="三、0-1-0-2-的计算过程" tabindex="-1">三、0.1 + 0.2 的计算过程 <a class="header-anchor" href="#三、0-1-0-2-的计算过程" aria-label="Permalink to &quot;三、0.1 + 0.2 的计算过程&quot;">​</a></h3><ol><li><strong>存储近似值</strong>： <ul><li><code>0.1</code> 的二进制近似值在计算机中存储为 <code>0.10000000000000000555...</code>。</li><li><code>0.2</code> 的二进制近似值存储为 <code>0.20000000000000001110...</code>。</li></ul></li><li><strong>加法运算</strong>： <ul><li>二进制加法后的结果约为 <code>0.30000000000000004440...</code>。</li></ul></li><li><strong>十进制转换</strong>： <ul><li>最终的十进制结果近似为 <code>0.30000000000000004</code>，因此 <code>0.1 + 0.2 !== 0.3</code>。</li></ul></li></ol><h3 id="四、验证与解决方案" tabindex="-1">四、验证与解决方案 <a class="header-anchor" href="#四、验证与解决方案" aria-label="Permalink to &quot;四、验证与解决方案&quot;">​</a></h3><h4 id="_1-验证精度问题" tabindex="-1">1. 验证精度问题 <a class="header-anchor" href="#_1-验证精度问题" aria-label="Permalink to &quot;1. 验证精度问题&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.30000000000000004</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><h4 id="_2-解决方案" tabindex="-1">2. 解决方案 <a class="header-anchor" href="#_2-解决方案" aria-label="Permalink to &quot;2. 解决方案&quot;">​</a></h4><ul><li><p><strong>方法一：容忍微小误差</strong> 使用一个极小的误差范围（如 <code>Number.EPSILON</code>）比较结果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number.EPSILON</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></li><li><p><strong>方法二：转为整数运算</strong> 将小数转换为整数计算后再还原：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 0.3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></li><li><p><strong>方法三：使用 <code>toFixed</code>（需谨慎）</strong> 截断小数位数（注意 <code>toFixed</code> 可能四舍五入）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;0.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></li><li><p><strong>方法四：使用高精度库</strong><br> 如 <code>decimal.js</code> 或 <code>big.js</code> 处理精确计算：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Decimal } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;decimal.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div></li></ul><h3 id="五、这不是-javascript-的-缺陷" tabindex="-1">五、这不是 JavaScript 的“缺陷”！ <a class="header-anchor" href="#五、这不是-javascript-的-缺陷" aria-label="Permalink to &quot;五、这不是 JavaScript 的“缺陷”！&quot;">​</a></h3><ul><li><strong>所有遵循 IEEE 754 的语言都有此问题</strong>（如 Python、Java、C++）。</li><li><strong>这是二进制浮点数的固有特性</strong>，与语言无关。</li><li><strong>整数计算不会出现此问题</strong>（例如 <code>0.5 + 0.5 === 1</code>，因为 <code>0.5</code> 是二进制有限小数）。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>0.1 + 0.2 !== 0.3</code> 的原因是：</p><ol><li>十进制小数转换为二进制时丢失精度。</li><li>浮点数的存储和计算基于近似值。</li><li>误差在运算过程中被放大。</li></ol><p>理解这一机制后，可以通过数学方法或第三方库规避精度问题。</p>`,23))])}const C=t(r,[["render",d]]);export{u as __pageData,C as default};
