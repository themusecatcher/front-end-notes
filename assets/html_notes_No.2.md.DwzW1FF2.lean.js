import{_ as p,c as o,j as i,a,G as e,ae as n,w as t,B as d,o as k}from"./chunks/framework.Dbi9E2AI.js";const C=JSON.parse('{"title":"Note 2","description":"","frontmatter":{},"headers":[],"relativePath":"html/notes/No.2.md","filePath":"html/notes/No.2.md","lastUpdated":1729134388000}'),r={name:"html/notes/No.2.md"},E={tabindex:"0"};function c(g,s,u,y,b,m){const h=d("BackTop"),l=d("Tag");return k(),o("div",null,[s[41]||(s[41]=i("h1",{id:"note-2",tabindex:"-1"},[a("Note 2 "),i("a",{class:"header-anchor",href:"#note-2","aria-label":'Permalink to "Note 2"'},"​")],-1)),e(h),s[42]||(s[42]=n('<h2 id="tabindex-让-div-具有-focus-和-blur-事件" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noreferrer">tabindex</a> &amp; 让 <code>div</code> 具有 <code>focus</code> 和 <code>blur</code> 事件 <a class="header-anchor" href="#tabindex-让-div-具有-focus-和-blur-事件" aria-label="Permalink to &quot;[tabindex](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex) &amp; 让 `div` 具有 `focus` 和 `blur` 事件&quot;">​</a></h2><p><code>tabindex</code> 全局属性 指示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航（通常使用Tab键，因此得名）。 div设置样式时，可正常使用 <code>:hover</code> 设置悬浮样式，但无法使用 <code>:focus</code> 设置聚焦样式 <code>&lt;div&gt;</code> 本身没有 <code>@blur</code> 和 <code>@focus</code> 事件，可以通过添加 <code>tabindex</code> 属性：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以使用在任何元素上，不管元素默认是否支持聚焦</p></div><p><code>tabindex</code> 接受一个整数作为值，具有不同的结果，具体取决于整数的值：</p><blockquote><p><strong>tabindex = 负值（通常是tabindex = &quot;-1&quot;）</strong></p></blockquote><p>表示元素是<strong>可聚焦的</strong>，但是不能通过键盘导航来访问到该元素，用 <code>JS</code> （例如：<code>@focus</code>）做页面小组件内部键盘导航的时候非常有用。</p><blockquote><p><strong>tabindex=&quot;0&quot;</strong></p></blockquote><p>表示元素是<strong>可聚焦的</strong>，并且可以通过键盘导航来聚焦到该元素，它的相对顺序是当前处于的 <code>DOM</code> 结构来决定的。（访问的顺序是按照元素在文档中的顺序来<code>focus</code>，即使采用浮动改变了页面中显示的顺序，依然是按照html文档中的顺序来定位。）</p><blockquote><p><strong>tabindex = 正值</strong></p></blockquote><ul><li>表示元素是<strong>可聚焦的</strong>，并且可以通过键盘导航来访问到该元素；它的相对顺序按照 <code>tabindex</code> 的数值递增而滞后获焦。如果多个元素拥有相同的 <code>tabindex</code>，它们的相对顺序按照他们在当前 <code>DOM</code> 中的先后顺序决定。</li><li>优先级大于 <code>tabindex=0</code>，在 <code>tabindex&gt;=1</code> 时，数字越小，优先级越低。</li></ul><p><code>tabindex</code> 的聚焦顺序：</p><ul><li>在可聚焦元素中，正整数数值越大，顺序越往后，正整数数值的节点顺序比 <code>0</code> 值的节点靠前。</li><li>在可聚焦元素中，相同 <code>tabindex</code> 数值的节点，根据 <code>DOM</code> 节点的先后顺序决定聚焦顺序。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果我们在 <code>&lt;div&gt;</code> 上设置了 <code>tabindex</code> 属性，它的子元素内容不能使用箭头键来滚动， 除非我们在内容上也设置 <code>tabindex</code>。<a href="https://jsfiddle.net/jainakshay/0b2q4Lgv/" target="_blank" rel="noreferrer">查看这篇 fiddle 来理解 tabindex 的滚动影响</a></p></div><blockquote><p>元素 element 分为 <code>focusable</code> 和 <code>非focusable</code>，使用 <code>tabindex</code> 可以改变元素相关的行为</p></blockquote><p>在HTML中有6个元素默认支持聚焦：</p><ol><li>带 <code>href</code> 属性的 <code>&lt;a&gt;</code> 标签</li><li>带 <code>href</code> 属性的 <code>&lt;link&gt;</code> 标签</li><li><code>&lt;button&gt;&lt;/button&gt;</code> 标签</li><li><code>&lt;input /&gt;</code> 标签 (排除带有 <code>type=&quot;hidden&quot;</code> 属性的)</li><li><code>&lt;select&gt;&lt;/select&gt;</code> 标签</li><li><code>&lt;textarea&gt;&lt;/textarea&gt;</code> 标签</li></ol><p>以上的元素默认都可以使用 <code>Tab</code> 键，以及 <code>JS</code> <code>focus()</code> 方法聚焦 例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>如何设置 <code>div</code> 元素的 <code>focus</code> 样式？ 使用 CSS伪类 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-within" target="_blank" rel="noreferrer"><code>:focus-within</code></a></p><p><code>:focus-within</code> 是一个 <code>CSS</code> 伪类 ，表示一个元素获得焦点 或 该元素的后代元素获得焦点。换句话说，元素自身或者它的某个后代匹配 <code>:focus</code> 伪类。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当 &lt;div&gt; 的某个后代获得焦点时，匹配 &lt;div&gt; */</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:focus-within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cyan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注</p><p>设置 <code>tabindex</code> 后，元素变为可聚焦状态，而当元素被聚焦时，浏览器会在元素周围显示一个蓝色的轮廓，这属于浏览器的默认行为，可通过在元素上添加以下 <code>CSS</code> 样式来隐藏:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  outline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="html5-新属性" tabindex="-1">HTML5 新属性 <a class="header-anchor" href="#html5-新属性" aria-label="Permalink to &quot;HTML5 新属性&quot;">​</a></h2><p><a href="https://www.runoob.com/tags/ref-standardattributes.html" target="_blank" rel="noreferrer"><code>HTML5</code> 新属性参考文档</a></p><p>HTML 属性能够赋予元素含义和语境。</p><p>下面的全局属性可用于任何 HTML5 元素。</p>',27)),i("table",E,[s[40]||(s[40]=i("thead",null,[i("tr",null,[i("th",null,"属性"),i("th",null,"描述")])],-1)),i("tbody",null,[s[32]||(s[32]=i("tr",null,[i("td",null,[i("code",null,"accesskey")]),i("td",null,"设置访问元素的键盘快捷键。")],-1)),s[33]||(s[33]=i("tr",null,[i("td",null,[i("code",null,"class")]),i("td",null,"规定元素的类名（classname）")],-1)),i("tr",null,[i("td",null,[s[1]||(s[1]=i("code",null,"contenteditable",-1)),s[2]||(s[2]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[0]||(s[0]=[a("New")])),_:1})]),s[3]||(s[3]=i("td",null,"规定是否可编辑元素的内容。",-1))]),i("tr",null,[i("td",null,[s[5]||(s[5]=i("code",null,"contextmenu",-1)),s[6]||(s[6]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[4]||(s[4]=[a("New")])),_:1})]),s[7]||(s[7]=i("td",null,"指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单",-1))]),i("tr",null,[i("td",null,[s[9]||(s[9]=i("code",null,"data-*",-1)),s[10]||(s[10]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[8]||(s[8]=[a("New")])),_:1})]),s[11]||(s[11]=i("td",null,"用于存储页面的自定义数据",-1))]),s[34]||(s[34]=i("tr",null,[i("td",null,[i("code",null,"dir")]),i("td",null,"设置元素中内容的文本方向。")],-1)),i("tr",null,[i("td",null,[s[13]||(s[13]=i("code",null,"draggable",-1)),s[14]||(s[14]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[12]||(s[12]=[a("New")])),_:1})]),s[15]||(s[15]=i("td",null,"指定某个元素是否可以拖动",-1))]),i("tr",null,[i("td",null,[s[17]||(s[17]=i("code",null,"dropzone",-1)),s[18]||(s[18]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[16]||(s[16]=[a("New")])),_:1})]),s[19]||(s[19]=i("td",null,"指定是否将数据复制，移动，或链接，或删除",-1))]),i("tr",null,[i("td",null,[s[21]||(s[21]=i("code",null,"hidden",-1)),s[22]||(s[22]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[20]||(s[20]=[a("New")])),_:1})]),s[23]||(s[23]=i("td",null,"hidden 属性规定对元素进行隐藏。",-1))]),s[35]||(s[35]=i("tr",null,[i("td",null,[i("code",null,"id")]),i("td",null,"规定元素的唯一 id")],-1)),s[36]||(s[36]=i("tr",null,[i("td",null,[i("code",null,"lang")]),i("td",null,"设置元素中内容的语言代码。")],-1)),i("tr",null,[i("td",null,[s[25]||(s[25]=i("code",null,"spellcheck",-1)),s[26]||(s[26]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[24]||(s[24]=[a("New")])),_:1})]),s[27]||(s[27]=i("td",null,"检测元素是否拼写错误",-1))]),s[37]||(s[37]=i("tr",null,[i("td",null,[i("code",null,"style")]),i("td",null,"规定元素的行内样式（inline style）")],-1)),s[38]||(s[38]=i("tr",null,[i("td",null,[i("code",null,"tabindex")]),i("td",null,"设置元素的 Tab 键控制次序。")],-1)),s[39]||(s[39]=i("tr",null,[i("td",null,[i("code",null,"title")]),i("td",null,"规定元素的额外信息（可在工具提示中显示）")],-1)),i("tr",null,[i("td",null,[s[29]||(s[29]=i("code",null,"translate",-1)),s[30]||(s[30]=a()),e(l,{bordered:!1,color:"cyan"},{default:t(()=>s[28]||(s[28]=[a("New")])),_:1})]),s[31]||(s[31]=i("td",null,"指定是否一个元素的值在页面载入时是否需要翻译",-1))])])]),s[43]||(s[43]=n(`<h2 id="htmlelement-dataset" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noreferrer">HTMLElement.dataset</a> <a class="header-anchor" href="#htmlelement-dataset" aria-label="Permalink to &quot;[HTMLElement.dataset](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset)&quot;">​</a></h2><p><code>HTMLElement</code> 接口的只读属性 <code>dataset</code> 提供了对元素上自定义数据属性（<code>data-*</code>）读/写访问。它暴露了一个字符串映射（<code>DOMStringMap</code>），其中包含每个<code> data-*</code> 属性条目。</p><div class="tip custom-block"><p class="custom-block-title">备注：</p><p><code>dataset</code> 属性本身可以被读取，但是不能直接写入。相反，所有写入都必须是写入 <code>dataset</code> 的单个属性，而 <code>dataset</code> 又表示这些数据的属性。</p></div><h2 id="canvas" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="noreferrer">Canvas</a> <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;[Canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)&quot;">​</a></h2><h2 id="loadeddata" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/loadeddata_event" target="_blank" rel="noreferrer">loadeddata</a> <a class="header-anchor" href="#loadeddata" aria-label="Permalink to &quot;[loadeddata](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/loadeddata_event)&quot;">​</a></h2><p><code>loadeddata</code> 事件在媒体当前播放位置的视频帧（通常是第一帧）加载完成后触发。</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>若在<code>移动/平板设备</code>的浏览器设置中开启了<code>流量节省（data-saver）</code>模式，该事件则不会被触发。</p></div><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p><em>使用<code>addEventListener()</code></em></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> video</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loadeddata&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Yay! readyState just increased to  &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;HAVE_CURRENT_DATA or greater for first time.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><em>使用 <code>onloadeddata</code> 事件处理器属性</em></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> video</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onloadeddata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Yay! readyState just increased to  &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;HAVE_CURRENT_DATA or greater for first time.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="loadedmetadata" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/loadedmetadata_event" target="_blank" rel="noreferrer">loadedmetadata</a> <a class="header-anchor" href="#loadedmetadata" aria-label="Permalink to &quot;[loadedmetadata](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/loadedmetadata_event)&quot;">​</a></h2><p><code>loadedmetadata</code>事件在元数据（<code>metadata</code>）被加载完成后触发。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.onloadedmetadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlerFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlerFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.onloadedmetadata</span></span></code></pre></div><h2 id="element-children" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/children" target="_blank" rel="noreferrer">Element.children</a> <a class="header-anchor" href="#element-children" aria-label="Permalink to &quot;[Element.children](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/children)&quot;">​</a></h2><p><code>Element.children</code> 是一个只读属性，返回 一个 <code>Node</code> 的<code>子elements</code> ，是一个动态更新的 <code>HTMLCollection</code>。</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.children</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p><code>children</code> 属性为只读属性，对象类型为 <code>HTMLCollection</code>，你可以使用 <code>elementNodeReference.children[1].nodeName</code> 来获取某个子元素的标签名称。</p></div><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// parg 是一个指向&lt;p&gt;元素的对象引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (parg.childElementCount) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查这个&lt;p&gt;元素是否有子元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 译者注:childElementCount 有兼容性问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parg.children;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 children[i] 来获取每个子元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注意:List 是一个 live 的 HTMLCollection 对象，在这里添加或删除 parg 的子元素节点，都会立即改变 List 的值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取含有指定类名的子元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> video</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parent.value.children).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.className.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nertc-video-container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, video)</span></span></code></pre></div><h2 id="element-firstelementchild" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/firstElementChild" target="_blank" rel="noreferrer">Element.firstElementChild</a> <a class="header-anchor" href="#element-firstelementchild" aria-label="Permalink to &quot;[Element.firstElementChild](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/firstElementChild)&quot;">​</a></h2><p><code>Element.firstElementChild</code> 只读属性返回元素的第一个子元素，如果没有子元素，则为 <code>null</code>。</p><p><code>Element.firstElementChild</code> 仅包含元素节点。要获取所有子节点（包括文本和注释节点等非元素节点），请使用 <code>Node.firstChild</code></p><h3 id="值" tabindex="-1">值 <a class="header-anchor" href="#值" aria-label="Permalink to &quot;值&quot;">​</a></h3><p>一个 <code>Element</code> 对象，或 <code>null</code>。</p><h2 id="node-firstchild" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/firstChild" target="_blank" rel="noreferrer">Node.firstChild</a> <a class="header-anchor" href="#node-firstchild" aria-label="Permalink to &quot;[Node.firstChild](https://developer.mozilla.org/zh-CN/docs/Web/API/Node/firstChild)&quot;">​</a></h2><p><code>Node.firstChild</code> 只读属性返回树中节点的第一个子节点，如果节点是无子节点，则返回 <code>null</code>。</p><h3 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> childNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.firstChild</span></span></code></pre></div><h3 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>如果有一个子节点，<code>childNode</code> 是节点的第一个子节点的引用，否则为 <code>null</code></p><h2 id="textarea-标签点击enter键发送文本" tabindex="-1"><code>&lt;textarea&gt;</code>标签点击<code>enter</code>键发送文本 <a class="header-anchor" href="#textarea-标签点击enter键发送文本" aria-label="Permalink to &quot;\`&lt;textarea&gt;\`标签点击\`enter\`键发送文本&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @keydown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onKeyboard&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onKeyboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Enter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 消除enter键换行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;enter e:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="谷歌浏览器使用iframe预览pdf隐藏工具栏" tabindex="-1">谷歌浏览器使用<code>iframe</code>预览<code>pdf</code>隐藏工具栏 <a class="header-anchor" href="#谷歌浏览器使用iframe预览pdf隐藏工具栏" aria-label="Permalink to &quot;谷歌浏览器使用\`iframe\`预览\`pdf\`隐藏工具栏&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\`\${pdf.url}#toolbar=0\`&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;900&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;400&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> frameborder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;您的浏览器不支持iframe标签。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="浏览器页面从输入url都发生了什么" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noreferrer">浏览器页面从输入url都发生了什么？</a> <a class="header-anchor" href="#浏览器页面从输入url都发生了什么" aria-label="Permalink to &quot;[浏览器页面从输入url都发生了什么？](https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work)&quot;">​</a></h2><ol><li>根据网址进行DNS解析，将域名解析为IP地址</li><li>客户端根据IP地址找到对应的服务器，通过 TCP三次握手，与服务器建立连接</li><li>客户端发起HTTP请求，请求对应资源，这个请求通常是一个html文件</li><li>服务器响应并返回相应数据，HTTP报文（如：HTML文件）</li><li>浏览器通过网络接收数据，处理 HTML 并构造 DOM树</li><li>CSS解析器处理CSS样式并构建 CSSOM树（CSS对象模型树）</li><li>将解析创建的 DOM树 和 CSSOM树 合成一个渲染树（ Rendering Tree）</li><li>根据渲染树，计算每个可见元素的布局，然后将其绘制到屏幕上（在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。）</li><li>最后，客户端与服务器进行TCP四次挥手断开连接，也可能复用连接</li></ol><p>不会被显示的元素，如 <code>&lt;head&gt;</code> 元素及其子元素，以及任何带有 <code>display: none</code> 的节点，如用户代理样式表中的 script <code>{ display: none; }</code>，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 <code>visibility: hidden</code> 的节点会包含在渲染树中，因为它们会占用空间。</p><h3 id="关键渲染路径" tabindex="-1">关键渲染路径 <a class="header-anchor" href="#关键渲染路径" aria-label="Permalink to &quot;关键渲染路径&quot;">​</a></h3><p>关键渲染路径是<strong>浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列</strong>。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 <code>文档对象模型(DOM)</code>，<code>CSS 对象模型 (CSSOM)</code>，<code>渲染树</code>和<code>布局</code>。</p><p>Web 性能包含了服务器请求和响应、加载、执行脚本、渲染、布局和绘制每个像素到屏幕上。</p><p>网页请求从 HTML 文件请求开始。服务器返回 HTML——响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。</p><p>用户看到页面分为两个阶段：</p><ul><li>页面内容加载完成。对应DOMContentLoaded</li><li>页面资源完成。对应Load</li></ul><p>整个关键渲染路径包括以下几个步骤：</p><ol><li>解析HTML，生成DOM树（DOM）</li><li>解析CSS，生成CSSOM树（CSSOM）</li><li>将DOM树和CSSOM树 合成渲染树（Rendering Tree）</li><li>根据渲染树，计算每个可见元素的布局（Layout）</li><li>将各个元素绘制到屏幕上（Paint）</li></ol>`,50))])}const v=p(r,[["render",c]]);export{C as __pageData,v as default};
