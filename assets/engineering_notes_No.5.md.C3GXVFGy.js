import{_ as i,c as a,o as n,ab as t}from"./chunks/framework.CZTdqPay.js";const E=JSON.parse('{"title":"Note 5","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/notes/No.5.md","filePath":"engineering/notes/No.5.md","lastUpdated":1752128552000}'),l={name:"engineering/notes/No.5.md"};function h(p,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="note-5" tabindex="-1">Note 5 <a class="header-anchor" href="#note-5" aria-label="Permalink to &quot;Note 5&quot;">​</a></h1><h2 id="sass-vue-props-css-变量-var" tabindex="-1"><code>Sass</code> &amp; <code>Vue Props</code> &amp; <code>CSS 变量(var)</code> <a class="header-anchor" href="#sass-vue-props-css-变量-var" aria-label="Permalink to &quot;\`Sass\` &amp; \`Vue Props\` &amp; \`CSS 变量(var)\`&quot;">​</a></h2><h3 id="_1-sass-编译时态" tabindex="-1">1. <code>Sass</code> 编译时态 <a class="header-anchor" href="#_1-sass-编译时态" aria-label="Permalink to &quot;1. \`Sass\` 编译时态&quot;">​</a></h3><br><p><strong>定义</strong>：<code>Sass</code> 的编译时态指的是 <code>Sass</code> 代码在项目构建阶段被转换成标准 <code>CSS</code> 的过程。</p><p><strong>特点</strong>：</p><ul><li><strong>静态处理</strong>：所有 <code>Sass</code> 变量、函数和 <code>mixin</code> 在编译时就被解析和计算</li><li><strong>不可变性</strong>：一旦编译完成，输出的 <code>CSS</code> 是静态不变的</li><li><strong>无运行时访问</strong>：无法访问浏览器环境或 <code>JavaScript</code> 运行时数据</li><li><strong>时间点</strong>：发生在代码打包阶段（<code>webpack</code>/<code>vite</code> 构建时）</li></ul><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译时处理示例</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#3498db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 编译时计算，输出固定值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">darken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>编译结果</strong>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#1d6fa5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 固定值，无法在运行时改变 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-vue-props-运行时态" tabindex="-1">2. <code>Vue Props</code> 运行时态 <a class="header-anchor" href="#_2-vue-props-运行时态" aria-label="Permalink to &quot;2. \`Vue Props\` 运行时态&quot;">​</a></h3><br><p><strong>定义</strong>：<code>Vue Props</code> 的运行时态指的是组件属性在浏览器环境中被解析、响应式更新和执行的过程。</p><p><strong>特点</strong>：</p><ul><li><strong>动态性</strong>：值可以在组件生命周期中变化</li><li><strong>响应式</strong>：<code>Vue</code> 的响应式系统自动追踪依赖和更新</li><li><strong>时间点</strong>：发生在浏览器执行阶段</li><li><strong>上下文感知</strong>：可以访问组件实例、<code>DOM</code> 和其他运行时环境</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 运行时绑定 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ color: props.color }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;动态内容&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_3-css-变量运行时态" tabindex="-1">3. CSS 变量运行时态 <a class="header-anchor" href="#_3-css-变量运行时态" aria-label="Permalink to &quot;3. CSS 变量运行时态&quot;">​</a></h3><br><p><strong>定义</strong>：<code>CSS 变量</code>（自定义属性）在浏览器渲染阶段被解析和应用的过程。</p><p><strong>特点</strong>：</p><ul><li><strong>动态更新</strong>：可以通过 <code>JavaScript</code> 实时修改</li><li><strong>级联作用域</strong>：遵循 <code>CSS</code> 级联规则，可继承</li><li><strong>浏览器处理</strong>：由浏览器渲染引擎在布局和绘制阶段计算</li><li><strong>时间点</strong>：发生在页面渲染和重绘期间</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --main-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#3498db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 可被 JavaScript 覆盖 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--main-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 运行时计算 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentElement.style.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--main-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#e74c3c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="三态对比分析" tabindex="-1">三态对比分析 <a class="header-anchor" href="#三态对比分析" aria-label="Permalink to &quot;三态对比分析&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><code>Sass</code> 编译时态</th><th><code>Vue Props</code> 运行时态</th><th><code>CSS</code> 变量运行时态</th></tr></thead><tbody><tr><td><strong>发生阶段</strong></td><td>构建时 (<code>webpack</code>/<code>vite</code>)</td><td>浏览器执行时</td><td>浏览器渲染时</td></tr><tr><td><strong>数据处理</strong></td><td>静态计算</td><td>响应式更新</td><td>动态计算</td></tr><tr><td><strong>可变性</strong></td><td>编译后不可变</td><td>可动态变化</td><td>可实时更新</td></tr><tr><td><strong>环境访问</strong></td><td>仅构建环境</td><td>完整浏览器环境</td><td>浏览器渲染引擎</td></tr><tr><td><strong>性能影响</strong></td><td>影响构建速度</td><td>影响运行时性能</td><td>影响渲染性能</td></tr><tr><td><strong>典型使用</strong></td><td>主题生成、样式复用</td><td>组件数据传递</td><td>动态主题切换</td></tr><tr><td><strong>与JS交互</strong></td><td>无直接交互</td><td>直接访问和修改</td><td>通过<code>JS API</code>修改</td></tr><tr><td><strong>值确定性</strong></td><td>编译时确定</td><td>运行时确定</td><td>渲染时确定</td></tr></tbody></table><h3 id="生命周期图示" tabindex="-1">生命周期图示 <a class="header-anchor" href="#生命周期图示" aria-label="Permalink to &quot;生命周期图示&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>构建阶段: </span></span>
<span class="line"><span>[Sass 源码] → (Sass 编译器) → [静态 CSS] → 打包到 bundle</span></span>
<span class="line"><span></span></span>
<span class="line"><span>加载阶段:</span></span>
<span class="line"><span>[HTML] → [JS Bundle] → (Vue 初始化)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>运行时阶段:</span></span>
<span class="line"><span>1. Vue 创建组件实例</span></span>
<span class="line"><span>2. Props 解析和响应式绑定</span></span>
<span class="line"><span>3. 组件渲染到 DOM</span></span>
<span class="line"><span>4. 浏览器解析 CSS</span></span>
<span class="line"><span>5. CSS 变量计算和应用</span></span>
<span class="line"><span>6. 用户交互触发更新</span></span></code></pre></div><h3 id="实际开发中的协同工作" tabindex="-1">实际开发中的协同工作 <a class="header-anchor" href="#实际开发中的协同工作" aria-label="Permalink to &quot;实际开发中的协同工作&quot;">​</a></h3><br><p><strong>场景</strong>：在 <code>Vue</code> 组件中基于 <code>props</code> 值动态设置饼图厚度</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pie-chart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;--thickness&#39;: \`\${thickness}px\`,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;--primary-color&#39;: primaryColor</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 图表内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  thickness: { type: Number, default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  primaryColor: { type: String, default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#3498db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scss&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.pie-chart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Sass 编译时处理 - 静态部分</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 CSS 变量 - 运行时计算</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--thickness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--thickness</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 尝试使用 Sass 函数（会失败，因为颜色值是运行时变量）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // background: darken(var(--primary-color), 10%);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ❌ 编译错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 正确解决方案：使用 CSS 原生函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color-mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> srgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 CSS 变量创建伪 3D 效果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    box-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> color-mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> srgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="关键问题解决-运行时值传递给-sass" tabindex="-1">关键问题解决：运行时值传递给 <code>Sass</code> <a class="header-anchor" href="#关键问题解决-运行时值传递给-sass" aria-label="Permalink to &quot;关键问题解决：运行时值传递给 \`Sass\`&quot;">​</a></h3><br><p>由于 <code>Sass</code> 的编译时特性，<strong>无法直接将运行时值传入 <code>Sass</code> 函数</strong>。解决方案：</p><ol><li><p><strong>CSS 原生函数替代</strong>：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用 color-mix 代替 Sass 的 darken() */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background: color-mix(in srgb, var(--primary-color) 70%, black);</span></span></code></pre></div></li><li><p><strong>JS 预处理</strong>：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> darkenedColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> darkenColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props.primaryColor, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> darkenColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JS 颜色处理实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> adjustHexColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hex, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;--dark-color&#39;: darkenedColor }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>CSS 相对颜色语法</strong>（现代浏览器）：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hsl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) h s </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="最佳实践总结" tabindex="-1">最佳实践总结 <a class="header-anchor" href="#最佳实践总结" aria-label="Permalink to &quot;最佳实践总结&quot;">​</a></h3><ol><li><p><strong>分层处理原则</strong>：</p><ul><li>静态样式 → <code>Sass</code> 处理</li><li>动态基础值 → <code>CSS</code> 变量</li><li>复杂逻辑 → <code>JavaScript</code> 计算</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>避免在 <code>CSS</code> 中使用复杂计算</li><li>使用 <code>CSS</code> 变量而非直接修改内联样式</li><li>对频繁变化的属性使用 <code>will-change</code></li></ul></li><li><p><strong>兼容性处理</strong>：</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 渐进增强</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#e74c3c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 回退值 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color-mix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> srgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>理解这三种状态的区别和协作方式，能够帮助开发者构建更高效、更动态的 <code>Vue</code> 应用，同时充分利用 <code>Sass</code> 的强大功能和 <code>CSS</code> 变量的灵活性。</p><h2 id="husky-lint-staged" tabindex="-1"><code>husky</code> &amp; <code>lint-staged</code> <a class="header-anchor" href="#husky-lint-staged" aria-label="Permalink to &quot;\`husky\` &amp; \`lint-staged\`&quot;">​</a></h2><p><code>Husky</code> 和 <code>Lint-Staged</code> 是前端开发中用于自动化代码质量控制的工具组合，主要通过 <code>Git</code> 钩子（<code>Git Hooks</code>）机制实现提交前的代码检查和格式化。</p><h3 id="⚙️-1-husky-git-钩子管理工具" tabindex="-1">⚙️ <strong>1. Husky：Git 钩子管理工具</strong> <a class="header-anchor" href="#⚙️-1-husky-git-钩子管理工具" aria-label="Permalink to &quot;⚙️ **1. Husky：Git 钩子管理工具**&quot;">​</a></h3><ul><li><strong>本质</strong>：<code>Husky</code> 是一个 <code>Node.js</code> 包，用于简化 <code>Git Hooks</code> 的管理和使用。</li><li><strong>作用</strong>：<br><code>Husky</code> 允许开发者在 <code>Git</code> 操作的各个阶段（如提交&lt;<code>commit</code>&gt;、推送&lt;<code>push</code>&gt;）触发自定义脚本。常用钩子包括： <ul><li><code>pre-commit</code>：在 <code>git commit</code> 命令执行前，但在用户输入提交信息后触发。常用于运行测试或代码检查。</li><li><code>commit-msg</code>：在用户输入提交信息后触发，用于校验提交信息的格式。（例如结合 <code>Commitlint</code> 规范提交信息）。</li><li><code>pre-push</code>: 在 <code>git push</code> 命令执行前触发，常用于运行更全面的测试。</li><li>（还有其他很多钩子，如 <code>pre-rebase</code>, <code>post-merge</code>, <code>post-checkout</code> 等）</li></ul></li><li><strong>工作原理</strong>：<br> 安装后，<code>Husky</code> 会在项目的 <code>.git/hooks</code> 目录中注入钩子脚本。当开发者执行 <code>Git</code> 操作（如 <code>git commit</code>）时，自动触发预设任务（如执行 <code>ESLint</code> 或单元测试）。</li></ul><h3 id="📁-2-lint-staged-针对暂存区文件的校验工具" tabindex="-1">📁 <strong>2. Lint-Staged：针对暂存区文件的校验工具</strong> <a class="header-anchor" href="#📁-2-lint-staged-针对暂存区文件的校验工具" aria-label="Permalink to &quot;📁 **2. Lint-Staged：针对暂存区文件的校验工具**&quot;">​</a></h3><ul><li><strong>本质</strong>：<code>Lint-Staged</code> 也是一个 <code>Node.js</code> 包。</li><li><strong>作用</strong>：<br> 仅对 <strong>Git 暂存区（Staged Files）</strong> 中的文件运行指定命令（如 <code>ESLint</code>、<code>Prettier</code>）。避免全量检查整个项目，大幅提升效率。</li><li><strong>典型场景</strong>：<br> 提交前自动修复代码风格（<code>Prettier</code>）、检测语法错误（<code>ESLint</code>），并将修复后的文件重新加入暂存区。</li></ul><h3 id="🔗-3-协作流程-husky-lint-staged" tabindex="-1">🔗 <strong>3. 协作流程：<code>Husky</code> + <code>Lint-Staged</code></strong> <a class="header-anchor" href="#🔗-3-协作流程-husky-lint-staged" aria-label="Permalink to &quot;🔗 **3. 协作流程：\`Husky\` + \`Lint-Staged\`**&quot;">​</a></h3><br><p>两者结合可实现 <strong>提交前的自动化流水线</strong>，构建了一个强大的、自动化的代码质量门禁系统：</p><h4 id="流程详解" tabindex="-1">流程详解 <a class="header-anchor" href="#流程详解" aria-label="Permalink to &quot;流程详解&quot;">​</a></h4><ol><li>开发者修改代码，并使用 <code>git add</code> 将想要提交的文件放入暂存区 (<code>Staging Area</code>)。</li><li>开发者执行 <code>git commit</code>。</li><li><code>Git</code> 触发 <code>pre-commit</code> 钩子。</li><li><code>Husky</code> 检测到配置好的 <code>pre-commit</code> 钩子（通常是一个指向 <code>lint-staged</code> 命令的脚本）。</li><li><code>Husky</code> 执行 <code>lint-staged</code> 命令。</li><li><code>Lint-Staged</code> 开始工作：</li></ol><ul><li><p>获取当前 <code>Git</code> 暂存区中的所有文件。</p></li><li><p>根据配置文件（通常是 <code>package.json</code> 中的 <code>lint-staged</code> 字段或 <code>.lintstagedrc</code> 文件），针对匹配的文件执行配置好的命令序列（例如 <code>eslint --fix</code>, <code>prettier --write</code>）。</p></li><li><p>如果这些命令成功执行（例如，<code>ESLint</code> 成功修复了所有可自动修复的问题，或者没有发现问题）：</p><ul><li>格式化/修复后的文件会被修改。</li><li>命令序列通常包含 <code>git add</code>，将这些修复后的改动重新添加回暂存区。</li><li><code>Lint-Staged</code> 以成功状态（<code>0</code>）退出。</li></ul></li><li><p>如果命令执行失败（例如，<code>ESLint</code> 发现了无法自动修复的错误）：</p><ul><li><code>Lint-Staged</code> 会输出错误信息，指出哪个文件哪行代码有问题。</li><li><code>Lint-Staged</code> 以失败状态（<code>非0</code>）退出。</li></ul></li></ul><ol start="7"><li><code>Husky</code> 接收到 <code>Lint-Staged</code> 的退出状态：</li></ol><ul><li>如果为 <code>0</code> (成功)：<code>Husky</code> 允许 <code>git commit</code> 流程继续进行，最终创建提交。提交中包含了原始修改 以及 <code>Lint-Staged</code> 自动修复后的结果。</li><li>如果为 <code>非0</code> (失败)：<code>Husky</code> 终止 <code>git commit</code> 流程，提交被阻止。开发者需要根据错误提示修复代码，然后再次 <code>git add</code> 并重试 <code>git commit</code>。</li></ul><h3 id="⚡-4-配置示例-package-json" tabindex="-1">⚡ <strong>4. 配置示例（package.json）</strong> <a class="header-anchor" href="#⚡-4-配置示例-package-json" aria-label="Permalink to &quot;⚡ **4. 配置示例（package.json）**&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prepare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化 Husky 钩子</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint-staged&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 触发 Lint-Staged</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;*.{js,ts,vue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;eslint --fix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动修复 ESLint 错误</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;prettier --write&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 格式化代码</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;git add&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 重新加入暂存区</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^9.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^13.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注</strong>：需通过命令 <code>npx husky add .husky/pre-commit &quot;npm run lint-staged&quot;</code> 绑定钩子。</p><h3 id="✅-5-核心优势" tabindex="-1">✅ <strong>5. 核心优势</strong> <a class="header-anchor" href="#✅-5-核心优势" aria-label="Permalink to &quot;✅ **5. 核心优势**&quot;">​</a></h3><ul><li><strong>提升代码质量</strong>：强制在提交前修复错误和统一风格，避免低级错误进入仓库。</li><li><strong>减少等待时间</strong>：仅检查改动文件，比全量扫描快 <code>10</code> 倍以上。</li><li><strong>团队协作标准化</strong>：统一规范，降低 <code>Code Review</code> 成本。</li><li><strong>无缝整合生态</strong>：支持 <code>ESLint</code>、<code>Prettier</code>、<code>Stylelint</code> 等主流工具。</li></ul><h3 id="🛠️-6-扩展应用" tabindex="-1">🛠️ <strong>6. 扩展应用</strong> <a class="header-anchor" href="#🛠️-6-扩展应用" aria-label="Permalink to &quot;🛠️ **6. 扩展应用**&quot;">​</a></h3><ul><li><strong>提交信息规范</strong>：结合 <code>commit-msg</code> 钩子 + <code>Commitlint</code>，强制提交信息符合约定式格式（如 <code>feat: add login</code>）。</li><li><strong>单元测试</strong>：对改动文件运行 <code>Jest</code> 测试（配置 <code>lint-staged</code> 执行 <code>jest --findRelatedTests</code>）。</li></ul><h3 id="💎-总结" tabindex="-1">💎 <strong>总结</strong> <a class="header-anchor" href="#💎-总结" aria-label="Permalink to &quot;💎 **总结**&quot;">​</a></h3><ul><li><p><code>Husky</code>： 是 <code>Git Hooks</code> 的管家。它让你能轻松定义在 <code>Git</code> 操作（尤其是提交）的哪个阶段触发什么任务，并将这些配置纳入版本控制，实现团队共享。</p></li><li><p><code>Lint-Staged</code>： 是暂存区文件的精准质检员。它只对你 <code>git add</code> 过、准备提交的文件运行代码检查和格式化命令，速度快且只关注相关改动。</p></li><li><p>组合使用： <code>Husky</code> 在 <code>pre-commit</code> 钩子中调用 <code>Lint-Staged</code>，是构建现代前端（及其他语言）项目自动化、高效、强制性代码质量保障流程的基石。它们显著提升了代码一致性、减少了低级错误、加速了 <code>Code Review</code> 过程，并使开发者能更专注于逻辑编写而非格式问题。</p></li></ul>`,61)]))}const g=i(l,[["render",h]]);export{E as __pageData,g as default};
