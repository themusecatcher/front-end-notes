import{_ as d,c,j as t,a as r,G as s,ae as n,B as i,o as a}from"./chunks/framework.Dbi9E2AI.js";const m=JSON.parse('{"title":"Note 8","description":"","frontmatter":{},"headers":[],"relativePath":"css/notes/No.8.md","filePath":"css/notes/No.8.md","lastUpdated":1727337514000}'),l={name:"css/notes/No.8.md"};function g(p,e,P,h,b,f){const o=i("BackTop");return a(),c("div",null,[e[0]||(e[0]=t("h1",{id:"note-8",tabindex:"-1"},[r("Note 8 "),t("a",{class:"header-anchor",href:"#note-8","aria-label":'Permalink to "Note 8"'},"​")],-1)),s(o),e[1]||(e[1]=n('<h2 id="css3定位" tabindex="-1">CSS3定位 <a class="header-anchor" href="#css3定位" aria-label="Permalink to &quot;CSS3定位&quot;">​</a></h2><p><code>positon</code>属性指定了元素的定位类型（静态的，相对的，绝对的或固定的）,默认值：<code>static</code></p><p>JavaScript语法：<code>object.style.position=&quot;absolute&quot;</code></p><table tabindex="0"><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">static</td><td style="text-align:left;"><strong>默认值。没有定位</strong>，元素<strong>出现在正常的流中</strong>（忽略 <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> 或者 <code>z-index</code> 声明）。</td></tr><tr><td style="text-align:left;">absolute</td><td style="text-align:left;">生成<strong>绝对定位</strong>的元素，<strong>相对于 <code>static</code> 定位以外的第一个父元素进行定位</strong>。<br>绝对定位的元素的位置<strong>相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code></strong><br>元素的位置通过 <code>left</code>, <code>top</code>, <code>right</code> 以及 <code>bottom</code> 属性进行规定。能很准确的将元素移动到想要的位置。<br><strong>使元素的位置与文档流无关，因此不占据空间</strong>。</td></tr><tr><td style="text-align:left;">fixed</td><td style="text-align:left;">生成<strong>固定定位</strong>的元素，<strong>相对于浏览器窗口进行定位</strong>。<br>元素的位置通过 <code>left</code>, <code>top</code>, <code>right</code> 以及 <code>bottom</code> 属性进行规定。<br><strong><code>Fixed</code>定位使元素的位置与文档流无关，因此不占据空间</strong>。</td></tr><tr><td style="text-align:left;">relative</td><td style="text-align:left;">生成<strong>相对定位</strong>的元素，<strong>相对于元素默认的位置进行定位（相对其正常位置）</strong>。<br>因此，<code>left:20</code> 会向元素的 <code>LEFT</code> 位置添加 <code>20</code> 像素。同样通过<code>top</code>、<code>bottom</code>、<code>left</code>以及<code>bottom</code>来明确元素的位置。<br><strong>移动相对定位元素，但它原本所占的空间不会改变</strong>。</td></tr><tr><td style="text-align:left;">sticky</td><td style="text-align:left;">粘性定位，<strong>该定位基于用户滚动的位置</strong>。<br>它的行为就像 <code>position:relative;</code> 而当页面滚动超出目标区域时，它的表现就像 <code>position:fixed;</code>，它会固定在目标位置。<br>粘性定位的元素<strong>依赖于用户的滚动</strong>，在 <code>position:relative</code> 与 <code>position:fixed</code> 定位之间切换。<br>它的行为就像 <code>position:relative;</code> 而<strong>当页面滚动超出目标区域时，它的表现就像</strong> <code>position:fixed;</code>，它<strong>会固定在目标位置</strong>。<br>元素定位表现为<strong>在跨越特定阈值前为相对定位，之后为固定定位</strong>。<br>这个<strong>特定阈值指的是</strong> <code>top</code>, <code>right</code>, <code>bottom</code> 或 <code>left</code> 之一，换言之，指定 <code>top</code>, <code>right</code>, <code>bottom</code> 或 <code>left</code> 四个阈值其中之一，<strong>才可使粘性定位生效</strong>。否则其行为与相对定位相同。</td></tr><tr><td style="text-align:left;">inherit</td><td style="text-align:left;">规定应该<strong>从父元素继承 <code>position</code> 属性的值</strong>。</td></tr><tr><td style="text-align:left;">initial</td><td style="text-align:left;">设置该属性为默认值，详情查看 <code>CSS initial</code> 关键字。</td></tr></tbody></table><h2 id="ppi-dpi-dpr" tabindex="-1"><code>PPI</code> &amp; <code>DPI</code> &amp; <code>DPR</code> <a class="header-anchor" href="#ppi-dpi-dpr" aria-label="Permalink to &quot;`PPI` &amp; `DPI` &amp; `DPR`&quot;">​</a></h2><h3 id="ppi-pixels-per-inch-每英寸像素数" tabindex="-1"><code>PPI</code> (Pixels Per Inch，<strong>每英寸像素数</strong>) <a class="header-anchor" href="#ppi-pixels-per-inch-每英寸像素数" aria-label="Permalink to &quot;`PPI` (Pixels Per Inch，**每英寸像素数**)&quot;">​</a></h3><ul><li><strong>定义</strong>：<code>PPI</code> 是指在一英寸长度内可以容纳的像素数量。它是一个度量单位，用来衡量显示设备的像素密度。<code>PPI</code> 通常用于屏幕显示设备，如手机、电视和电脑显示器</li><li><strong>应用</strong>：<code>PPI</code> 常用于描述屏幕的清晰度。<code>PPI</code> 越高，屏幕显示的图像就越细腻，细节也就越丰富。</li></ul><h3 id="dpi-dots-per-inch-每英寸点数" tabindex="-1"><code>DPI</code> (Dots Per Inch，<strong>每英寸点数</strong>) <a class="header-anchor" href="#dpi-dots-per-inch-每英寸点数" aria-label="Permalink to &quot;`DPI` (Dots Per Inch，**每英寸点数**)&quot;">​</a></h3><ul><li><strong>定义</strong>：<code>DPI</code> 是一个更通用的术语，通常用来描述打印分辨率，即每英寸长度内可以打印的点（墨点）数量。</li><li><strong>应用</strong>：<code>DPI</code> 用于衡量打印机、扫描仪等输出设备的分辨率。<code>DPI</code> 越高，打印或扫描的图像质量就越高。</li><li><strong>显示DPI</strong>：图像在屏幕上显示时的分辨率，取决于屏幕的尺寸和分辨率</li></ul><h3 id="dpr-device-pixel-ratio-设备像素比" tabindex="-1"><code>DPR</code> (Device Pixel Ratio，<strong>设备像素比</strong>) <a class="header-anchor" href="#dpr-device-pixel-ratio-设备像素比" aria-label="Permalink to &quot;`DPR` (Device Pixel Ratio，**设备像素比**)&quot;">​</a></h3><ul><li><strong>定义</strong>：<code>DPR</code> 是指显示设备的物理像素与CSS像素的比率。CSS像素是一种虚拟的像素单位，用于网页设计中。</li><li><strong>应用</strong>：<code>DPR</code> 用于处理高分辨率显示设备上的图像缩放问题。例如，一个具有<code>2</code>倍<code>DPR</code>的设备，其物理像素是CSS像素的两倍。</li></ul><h3 id="区别说明" tabindex="-1">区别说明 <a class="header-anchor" href="#区别说明" aria-label="Permalink to &quot;区别说明&quot;">​</a></h3><ul><li><strong>应用领域</strong>：<code>PPI</code> 主要用于屏幕显示设备的像素密度，而 <code>DPI</code> 主要用于打印和扫描设备的分辨率。<code>DPR</code> 是一个与Web设计相关的术语，用于处理不同分辨率设备上的图像和布局。</li><li><strong>度量单位</strong>：<code>PPI</code> 和 <code>DPI</code> 都是以英寸为单位来度量像素或点的数量，但它们分别用于不同的设备和场景。</li><li><strong>与设备分辨率的关系</strong>：<code>PPI</code> 是设备固有的属性，而 <code>DPI</code> 通常与打印质量相关。<code>DPR</code> 是一个比率，用来调整Web内容在不同设备上的表现。</li></ul>',13))])}const u=d(l,[["render",g]]);export{m as __pageData,u as default};
